'------------------------------------------------------------------------------
' <auto-generated>
'     此代码由工具生成。
'     运行时版本:4.0.30319.17929
'
'     对此文件的更改可能会导致不正确的行为，并且如果
'     重新生成代码，这些更改将会丢失。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'此源代码是由 Microsoft.VSDesigner 4.0.30319.17929 版自动生成。
'
Namespace DcsWebReference
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="WorkStationSoapBinding", [Namespace]:="http://elearning.luxshare-ict.com/axis/WorkStation.jws"),  _
     System.Xml.Serialization.SoapIncludeAttribute(GetType(Vector))>  _
    Partial Public Class WorkStationService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private mainOperationCompleted As System.Threading.SendOrPostCallback
        
        Private closeAllOperationCompleted As System.Threading.SendOrPostCallback
        
        Private executeSelectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getLicenceCodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getConnectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private executeSqlOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            ' Me.Url = Global.RunCard.My.MySettings.Default.RunCard_DcsWebReference_WorkStationService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event mainCompleted As mainCompletedEventHandler
        
        '''<remarks/>
        Public Event closeAllCompleted As closeAllCompletedEventHandler
        
        '''<remarks/>
        Public Event executeSelectCompleted As executeSelectCompletedEventHandler
        
        '''<remarks/>
        Public Event getLicenceCodeCompleted As getLicenceCodeCompletedEventHandler
        
        '''<remarks/>
        Public Event getConnectCompleted As getConnectCompletedEventHandler
        
        '''<remarks/>
        Public Event executeSqlCompleted As executeSqlCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace:="http://DefaultNamespace", ResponseNamespace:="http://elearning.luxshare-ict.com/axis/WorkStation.jws")>  _
        Public Sub main(ByVal args() As String)
            Me.Invoke("main", New Object() {args})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub mainAsync(ByVal args() As String)
            Me.mainAsync(args, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub mainAsync(ByVal args() As String, ByVal userState As Object)
            If (Me.mainOperationCompleted Is Nothing) Then
                Me.mainOperationCompleted = AddressOf Me.OnmainOperationCompleted
            End If
            Me.InvokeAsync("main", New Object() {args}, Me.mainOperationCompleted, userState)
        End Sub
        
        Private Sub OnmainOperationCompleted(ByVal arg As Object)
            If (Not (Me.mainCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent mainCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace:="http://DefaultNamespace", ResponseNamespace:="http://elearning.luxshare-ict.com/axis/WorkStation.jws")>  _
        Public Sub closeAll()
            Me.Invoke("closeAll", New Object(-1) {})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub closeAllAsync()
            Me.closeAllAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub closeAllAsync(ByVal userState As Object)
            If (Me.closeAllOperationCompleted Is Nothing) Then
                Me.closeAllOperationCompleted = AddressOf Me.OncloseAllOperationCompleted
            End If
            Me.InvokeAsync("closeAll", New Object(-1) {}, Me.closeAllOperationCompleted, userState)
        End Sub
        
        Private Sub OncloseAllOperationCompleted(ByVal arg As Object)
            If (Not (Me.closeAllCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent closeAllCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace:="http://DefaultNamespace", ResponseNamespace:="http://elearning.luxshare-ict.com/axis/WorkStation.jws")>  _
        Public Function executeSelect(ByVal sql As String, ByVal params() As Object) As <System.Xml.Serialization.SoapElementAttribute("executeSelectReturn")> Object()
            Dim results() As Object = Me.Invoke("executeSelect", New Object() {sql, params})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub executeSelectAsync(ByVal sql As String, ByVal params() As Object)
            Me.executeSelectAsync(sql, params, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub executeSelectAsync(ByVal sql As String, ByVal params() As Object, ByVal userState As Object)
            If (Me.executeSelectOperationCompleted Is Nothing) Then
                Me.executeSelectOperationCompleted = AddressOf Me.OnexecuteSelectOperationCompleted
            End If
            Me.InvokeAsync("executeSelect", New Object() {sql, params}, Me.executeSelectOperationCompleted, userState)
        End Sub
        
        Private Sub OnexecuteSelectOperationCompleted(ByVal arg As Object)
            If (Not (Me.executeSelectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent executeSelectCompleted(Me, New executeSelectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace:="http://DefaultNamespace", ResponseNamespace:="http://elearning.luxshare-ict.com/axis/WorkStation.jws")>  _
        Public Function getLicenceCode(ByVal jobnumber As String, ByVal stationCode As String) As <System.Xml.Serialization.SoapElementAttribute("getLicenceCodeReturn")> Integer
            Dim results() As Object = Me.Invoke("getLicenceCode", New Object() {jobnumber, stationCode})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getLicenceCodeAsync(ByVal jobnumber As String, ByVal stationCode As String)
            Me.getLicenceCodeAsync(jobnumber, stationCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getLicenceCodeAsync(ByVal jobnumber As String, ByVal stationCode As String, ByVal userState As Object)
            If (Me.getLicenceCodeOperationCompleted Is Nothing) Then
                Me.getLicenceCodeOperationCompleted = AddressOf Me.OngetLicenceCodeOperationCompleted
            End If
            Me.InvokeAsync("getLicenceCode", New Object() {jobnumber, stationCode}, Me.getLicenceCodeOperationCompleted, userState)
        End Sub
        
        Private Sub OngetLicenceCodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.getLicenceCodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getLicenceCodeCompleted(Me, New getLicenceCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace:="http://DefaultNamespace", ResponseNamespace:="http://elearning.luxshare-ict.com/axis/WorkStation.jws")>  _
        Public Function getConnect() As <System.Xml.Serialization.SoapElementAttribute("getConnectReturn")> Object
            Dim results() As Object = Me.Invoke("getConnect", New Object(-1) {})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getConnectAsync()
            Me.getConnectAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getConnectAsync(ByVal userState As Object)
            If (Me.getConnectOperationCompleted Is Nothing) Then
                Me.getConnectOperationCompleted = AddressOf Me.OngetConnectOperationCompleted
            End If
            Me.InvokeAsync("getConnect", New Object(-1) {}, Me.getConnectOperationCompleted, userState)
        End Sub
        
        Private Sub OngetConnectOperationCompleted(ByVal arg As Object)
            If (Not (Me.getConnectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getConnectCompleted(Me, New getConnectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace:="http://DefaultNamespace", ResponseNamespace:="http://elearning.luxshare-ict.com/axis/WorkStation.jws")>  _
        Public Function executeSql(ByVal sql As String, ByVal obj() As Object) As <System.Xml.Serialization.SoapElementAttribute("executeSqlReturn")> Integer
            Dim results() As Object = Me.Invoke("executeSql", New Object() {sql, obj})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub executeSqlAsync(ByVal sql As String, ByVal obj() As Object)
            Me.executeSqlAsync(sql, obj, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub executeSqlAsync(ByVal sql As String, ByVal obj() As Object, ByVal userState As Object)
            If (Me.executeSqlOperationCompleted Is Nothing) Then
                Me.executeSqlOperationCompleted = AddressOf Me.OnexecuteSqlOperationCompleted
            End If
            Me.InvokeAsync("executeSql", New Object() {sql, obj}, Me.executeSqlOperationCompleted, userState)
        End Sub
        
        Private Sub OnexecuteSqlOperationCompleted(ByVal arg As Object)
            If (Not (Me.executeSqlCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent executeSqlCompleted(Me, New executeSqlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.SoapTypeAttribute([Namespace]:="http://xml.apache.org/xml-soap")>  _
    Partial Public Class Vector
        
        Private itemField() As Object
        
        '''<remarks/>
        Public Property item() As Object()
            Get
                Return Me.itemField
            End Get
            Set
                Me.itemField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub mainCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub closeAllCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub executeSelectCompletedEventHandler(ByVal sender As Object, ByVal e As executeSelectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class executeSelectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub getLicenceCodeCompletedEventHandler(ByVal sender As Object, ByVal e As getLicenceCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getLicenceCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub getConnectCompletedEventHandler(ByVal sender As Object, ByVal e As getConnectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getConnectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub executeSqlCompletedEventHandler(ByVal sender As Object, ByVal e As executeSqlCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class executeSqlCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
End Namespace
