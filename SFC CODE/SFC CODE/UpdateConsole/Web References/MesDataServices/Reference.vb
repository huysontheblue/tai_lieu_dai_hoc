'------------------------------------------------------------------------------
' <auto-generated>
'     此代码由工具生成。
'     运行时版本:4.0.30319.17929
'
'     对此文件的更改可能会导致不正确的行为，并且如果
'     重新生成代码，这些更改将会丢失。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'此源代码是由 Microsoft.VSDesigner 4.0.30319.17929 版自动生成。
'
Namespace MesDataServices
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="BasicHttpBinding_IMESDataServices", [Namespace]:="http://tempuri.org/"),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(SqlParam()))>  _
    Partial Public Class MESDataServices
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private GetDataFromSFCOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertDataToSFCOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTiptopBOMInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCheckEquipmentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExecEquipmentUpdateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEncrytStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertCADVersionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPLMECNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetECNBomOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExecECNBomUpdateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSystemAddressOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSettingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSFCFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExecMaterialIssueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSFCStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.UpdateConsole.My.MySettings.Default.UpdateConsole_MesDataServices_MESDataServices
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event GetDataFromSFCCompleted As GetDataFromSFCCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertDataToSFCCompleted As InsertDataToSFCCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTiptopBOMInfoCompleted As GetTiptopBOMInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCheckEquipmentCompleted As GetCheckEquipmentCompletedEventHandler
        
        '''<remarks/>
        Public Event ExecEquipmentUpdateCompleted As ExecEquipmentUpdateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEncrytStringCompleted As GetEncrytStringCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertCADVersionCompleted As InsertCADVersionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPLMECNCompleted As GetPLMECNCompletedEventHandler
        
        '''<remarks/>
        Public Event GetECNBomCompleted As GetECNBomCompletedEventHandler
        
        '''<remarks/>
        Public Event ExecECNBomUpdateCompleted As ExecECNBomUpdateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSystemAddressCompleted As GetSystemAddressCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSettingCompleted As GetSettingCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSFCFileCompleted As GetSFCFileCompletedEventHandler
        
        '''<remarks/>
        Public Event ExecMaterialIssueCompleted As ExecMaterialIssueCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSFCStatusCompleted As GetSFCStatusCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/GetDataFromSFC", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDataFromSFC(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal spName As String, <System.Xml.Serialization.XmlArrayAttribute(IsNullable:=true), System.Xml.Serialization.XmlArrayItemAttribute([Namespace]:="http://schemas.datacontract.org/2004/07/DAL")> ByVal parameters() As SqlParam) As <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetDataFromSFC", New Object() {spName, parameters})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDataFromSFCAsync(ByVal spName As String, ByVal parameters() As SqlParam)
            Me.GetDataFromSFCAsync(spName, parameters, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDataFromSFCAsync(ByVal spName As String, ByVal parameters() As SqlParam, ByVal userState As Object)
            If (Me.GetDataFromSFCOperationCompleted Is Nothing) Then
                Me.GetDataFromSFCOperationCompleted = AddressOf Me.OnGetDataFromSFCOperationCompleted
            End If
            Me.InvokeAsync("GetDataFromSFC", New Object() {spName, parameters}, Me.GetDataFromSFCOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDataFromSFCOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDataFromSFCCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDataFromSFCCompleted(Me, New GetDataFromSFCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/InsertDataToSFC", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub InsertDataToSFC(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal spName As String, <System.Xml.Serialization.XmlArrayAttribute(IsNullable:=true), System.Xml.Serialization.XmlArrayItemAttribute([Namespace]:="http://schemas.datacontract.org/2004/07/DAL")> ByVal parameters() As SqlParam, ByRef InsertDataToSFCResult As Boolean, <System.Xml.Serialization.XmlIgnoreAttribute()> ByRef InsertDataToSFCResultSpecified As Boolean)
            Dim results() As Object = Me.Invoke("InsertDataToSFC", New Object() {spName, parameters})
            InsertDataToSFCResult = CType(results(0),Boolean)
            InsertDataToSFCResultSpecified = CType(results(1),Boolean)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertDataToSFCAsync(ByVal spName As String, ByVal parameters() As SqlParam)
            Me.InsertDataToSFCAsync(spName, parameters, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertDataToSFCAsync(ByVal spName As String, ByVal parameters() As SqlParam, ByVal userState As Object)
            If (Me.InsertDataToSFCOperationCompleted Is Nothing) Then
                Me.InsertDataToSFCOperationCompleted = AddressOf Me.OnInsertDataToSFCOperationCompleted
            End If
            Me.InvokeAsync("InsertDataToSFC", New Object() {spName, parameters}, Me.InsertDataToSFCOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertDataToSFCOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertDataToSFCCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertDataToSFCCompleted(Me, New InsertDataToSFCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/GetTiptopBOMInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTiptopBOMInfo(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal FactoryId As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal ProfitCenter As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal PartNO As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByRef rtValue As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByRef rtMsg As String) As <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetTiptopBOMInfo", New Object() {FactoryId, ProfitCenter, PartNO})
            rtValue = CType(results(1),String)
            rtMsg = CType(results(2),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTiptopBOMInfoAsync(ByVal FactoryId As String, ByVal ProfitCenter As String, ByVal PartNO As String)
            Me.GetTiptopBOMInfoAsync(FactoryId, ProfitCenter, PartNO, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTiptopBOMInfoAsync(ByVal FactoryId As String, ByVal ProfitCenter As String, ByVal PartNO As String, ByVal userState As Object)
            If (Me.GetTiptopBOMInfoOperationCompleted Is Nothing) Then
                Me.GetTiptopBOMInfoOperationCompleted = AddressOf Me.OnGetTiptopBOMInfoOperationCompleted
            End If
            Me.InvokeAsync("GetTiptopBOMInfo", New Object() {FactoryId, ProfitCenter, PartNO}, Me.GetTiptopBOMInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTiptopBOMInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTiptopBOMInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTiptopBOMInfoCompleted(Me, New GetTiptopBOMInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/GetCheckEquipment", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub GetCheckEquipment(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal FactoryId As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal profitcenter As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal EquipmentNO As String, ByRef GetCheckEquipmentResult As Boolean, <System.Xml.Serialization.XmlIgnoreAttribute()> ByRef GetCheckEquipmentResultSpecified As Boolean, ByRef Quantity As Integer, <System.Xml.Serialization.XmlIgnoreAttribute()> ByRef QuantitySpecified As Boolean, ByRef ValidQuantity As Integer, <System.Xml.Serialization.XmlIgnoreAttribute()> ByRef ValidQuantitySpecified As Boolean, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByRef rtValue As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByRef rtMsg As String)
            Dim results() As Object = Me.Invoke("GetCheckEquipment", New Object() {FactoryId, profitcenter, EquipmentNO})
            GetCheckEquipmentResult = CType(results(0),Boolean)
            GetCheckEquipmentResultSpecified = CType(results(1),Boolean)
            Quantity = CType(results(2),Integer)
            QuantitySpecified = CType(results(3),Boolean)
            ValidQuantity = CType(results(4),Integer)
            ValidQuantitySpecified = CType(results(5),Boolean)
            rtValue = CType(results(6),String)
            rtMsg = CType(results(7),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCheckEquipmentAsync(ByVal FactoryId As String, ByVal profitcenter As String, ByVal EquipmentNO As String)
            Me.GetCheckEquipmentAsync(FactoryId, profitcenter, EquipmentNO, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCheckEquipmentAsync(ByVal FactoryId As String, ByVal profitcenter As String, ByVal EquipmentNO As String, ByVal userState As Object)
            If (Me.GetCheckEquipmentOperationCompleted Is Nothing) Then
                Me.GetCheckEquipmentOperationCompleted = AddressOf Me.OnGetCheckEquipmentOperationCompleted
            End If
            Me.InvokeAsync("GetCheckEquipment", New Object() {FactoryId, profitcenter, EquipmentNO}, Me.GetCheckEquipmentOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCheckEquipmentOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCheckEquipmentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCheckEquipmentCompleted(Me, New GetCheckEquipmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/ExecEquipmentUpdate", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub ExecEquipmentUpdate(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal FactoryId As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal profitcenter As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal EquipmentNO As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal ProudctId As String, ByRef ExecEquipmentUpdateResult As Boolean, <System.Xml.Serialization.XmlIgnoreAttribute()> ByRef ExecEquipmentUpdateResultSpecified As Boolean, ByRef Quantity As Integer, <System.Xml.Serialization.XmlIgnoreAttribute()> ByRef QuantitySpecified As Boolean, ByRef ValidQuantity As Integer, <System.Xml.Serialization.XmlIgnoreAttribute()> ByRef ValidQuantitySpecified As Boolean, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByRef rtValue As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByRef rtMsg As String)
            Dim results() As Object = Me.Invoke("ExecEquipmentUpdate", New Object() {FactoryId, profitcenter, EquipmentNO, ProudctId})
            ExecEquipmentUpdateResult = CType(results(0),Boolean)
            ExecEquipmentUpdateResultSpecified = CType(results(1),Boolean)
            Quantity = CType(results(2),Integer)
            QuantitySpecified = CType(results(3),Boolean)
            ValidQuantity = CType(results(4),Integer)
            ValidQuantitySpecified = CType(results(5),Boolean)
            rtValue = CType(results(6),String)
            rtMsg = CType(results(7),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExecEquipmentUpdateAsync(ByVal FactoryId As String, ByVal profitcenter As String, ByVal EquipmentNO As String, ByVal ProudctId As String)
            Me.ExecEquipmentUpdateAsync(FactoryId, profitcenter, EquipmentNO, ProudctId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExecEquipmentUpdateAsync(ByVal FactoryId As String, ByVal profitcenter As String, ByVal EquipmentNO As String, ByVal ProudctId As String, ByVal userState As Object)
            If (Me.ExecEquipmentUpdateOperationCompleted Is Nothing) Then
                Me.ExecEquipmentUpdateOperationCompleted = AddressOf Me.OnExecEquipmentUpdateOperationCompleted
            End If
            Me.InvokeAsync("ExecEquipmentUpdate", New Object() {FactoryId, profitcenter, EquipmentNO, ProudctId}, Me.ExecEquipmentUpdateOperationCompleted, userState)
        End Sub
        
        Private Sub OnExecEquipmentUpdateOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExecEquipmentUpdateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExecEquipmentUpdateCompleted(Me, New ExecEquipmentUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/GetEncrytString", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEncrytString(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal strText As String) As <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> String
            Dim results() As Object = Me.Invoke("GetEncrytString", New Object() {strText})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEncrytStringAsync(ByVal strText As String)
            Me.GetEncrytStringAsync(strText, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEncrytStringAsync(ByVal strText As String, ByVal userState As Object)
            If (Me.GetEncrytStringOperationCompleted Is Nothing) Then
                Me.GetEncrytStringOperationCompleted = AddressOf Me.OnGetEncrytStringOperationCompleted
            End If
            Me.InvokeAsync("GetEncrytString", New Object() {strText}, Me.GetEncrytStringOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEncrytStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEncrytStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEncrytStringCompleted(Me, New GetEncrytStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/InsertCADVersion", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub InsertCADVersion(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal FactoryId As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal ProfitCenter As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal UserId As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal ComputerName As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal FileName As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal Description As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal PartNO As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal Version As String, ByRef InsertCADVersionResult As Boolean, <System.Xml.Serialization.XmlIgnoreAttribute()> ByRef InsertCADVersionResultSpecified As Boolean, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByRef rtValue As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByRef rtMsg As String)
            Dim results() As Object = Me.Invoke("InsertCADVersion", New Object() {FactoryId, ProfitCenter, UserId, ComputerName, FileName, Description, PartNO, Version})
            InsertCADVersionResult = CType(results(0),Boolean)
            InsertCADVersionResultSpecified = CType(results(1),Boolean)
            rtValue = CType(results(2),String)
            rtMsg = CType(results(3),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertCADVersionAsync(ByVal FactoryId As String, ByVal ProfitCenter As String, ByVal UserId As String, ByVal ComputerName As String, ByVal FileName As String, ByVal Description As String, ByVal PartNO As String, ByVal Version As String)
            Me.InsertCADVersionAsync(FactoryId, ProfitCenter, UserId, ComputerName, FileName, Description, PartNO, Version, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertCADVersionAsync(ByVal FactoryId As String, ByVal ProfitCenter As String, ByVal UserId As String, ByVal ComputerName As String, ByVal FileName As String, ByVal Description As String, ByVal PartNO As String, ByVal Version As String, ByVal userState As Object)
            If (Me.InsertCADVersionOperationCompleted Is Nothing) Then
                Me.InsertCADVersionOperationCompleted = AddressOf Me.OnInsertCADVersionOperationCompleted
            End If
            Me.InvokeAsync("InsertCADVersion", New Object() {FactoryId, ProfitCenter, UserId, ComputerName, FileName, Description, PartNO, Version}, Me.InsertCADVersionOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertCADVersionOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertCADVersionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertCADVersionCompleted(Me, New InsertCADVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/GetPLMECN", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPLMECN(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal FactoryId As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal Profitcenter As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal ECNID As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByRef rtValue As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByRef rtMsg As String) As <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetPLMECN", New Object() {FactoryId, Profitcenter, ECNID})
            rtValue = CType(results(1),String)
            rtMsg = CType(results(2),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPLMECNAsync(ByVal FactoryId As String, ByVal Profitcenter As String, ByVal ECNID As String)
            Me.GetPLMECNAsync(FactoryId, Profitcenter, ECNID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPLMECNAsync(ByVal FactoryId As String, ByVal Profitcenter As String, ByVal ECNID As String, ByVal userState As Object)
            If (Me.GetPLMECNOperationCompleted Is Nothing) Then
                Me.GetPLMECNOperationCompleted = AddressOf Me.OnGetPLMECNOperationCompleted
            End If
            Me.InvokeAsync("GetPLMECN", New Object() {FactoryId, Profitcenter, ECNID}, Me.GetPLMECNOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPLMECNOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPLMECNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPLMECNCompleted(Me, New GetPLMECNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/GetECNBom", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetECNBom(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal FactoryId As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal profitcenter As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal PartNO As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByRef rtValue As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByRef rtMsg As String) As <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetECNBom", New Object() {FactoryId, profitcenter, PartNO})
            rtValue = CType(results(1),String)
            rtMsg = CType(results(2),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetECNBomAsync(ByVal FactoryId As String, ByVal profitcenter As String, ByVal PartNO As String)
            Me.GetECNBomAsync(FactoryId, profitcenter, PartNO, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetECNBomAsync(ByVal FactoryId As String, ByVal profitcenter As String, ByVal PartNO As String, ByVal userState As Object)
            If (Me.GetECNBomOperationCompleted Is Nothing) Then
                Me.GetECNBomOperationCompleted = AddressOf Me.OnGetECNBomOperationCompleted
            End If
            Me.InvokeAsync("GetECNBom", New Object() {FactoryId, profitcenter, PartNO}, Me.GetECNBomOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetECNBomOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetECNBomCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetECNBomCompleted(Me, New GetECNBomCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/ExecECNBomUpdate", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub ExecECNBomUpdate(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal FactoryId As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal profitcenter As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal dtBom As System.Data.DataTable, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal ECNID As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal PARTNUMBER As String, ByRef ExecECNBomUpdateResult As Boolean, <System.Xml.Serialization.XmlIgnoreAttribute()> ByRef ExecECNBomUpdateResultSpecified As Boolean, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByRef rtValue As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByRef rtMsg As String)
            Dim results() As Object = Me.Invoke("ExecECNBomUpdate", New Object() {FactoryId, profitcenter, dtBom, ECNID, PARTNUMBER})
            ExecECNBomUpdateResult = CType(results(0),Boolean)
            ExecECNBomUpdateResultSpecified = CType(results(1),Boolean)
            rtValue = CType(results(2),String)
            rtMsg = CType(results(3),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExecECNBomUpdateAsync(ByVal FactoryId As String, ByVal profitcenter As String, ByVal dtBom As System.Data.DataTable, ByVal ECNID As String, ByVal PARTNUMBER As String)
            Me.ExecECNBomUpdateAsync(FactoryId, profitcenter, dtBom, ECNID, PARTNUMBER, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExecECNBomUpdateAsync(ByVal FactoryId As String, ByVal profitcenter As String, ByVal dtBom As System.Data.DataTable, ByVal ECNID As String, ByVal PARTNUMBER As String, ByVal userState As Object)
            If (Me.ExecECNBomUpdateOperationCompleted Is Nothing) Then
                Me.ExecECNBomUpdateOperationCompleted = AddressOf Me.OnExecECNBomUpdateOperationCompleted
            End If
            Me.InvokeAsync("ExecECNBomUpdate", New Object() {FactoryId, profitcenter, dtBom, ECNID, PARTNUMBER}, Me.ExecECNBomUpdateOperationCompleted, userState)
        End Sub
        
        Private Sub OnExecECNBomUpdateOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExecECNBomUpdateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExecECNBomUpdateCompleted(Me, New ExecECNBomUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/GetSystemAddress", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSystemAddress(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal FactoryId As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal ProfitCenter As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal UpdateType As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByRef rtValue As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByRef rtMsg As String) As <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> String
            Dim results() As Object = Me.Invoke("GetSystemAddress", New Object() {FactoryId, ProfitCenter, UpdateType})
            rtValue = CType(results(1),String)
            rtMsg = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSystemAddressAsync(ByVal FactoryId As String, ByVal ProfitCenter As String, ByVal UpdateType As String)
            Me.GetSystemAddressAsync(FactoryId, ProfitCenter, UpdateType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSystemAddressAsync(ByVal FactoryId As String, ByVal ProfitCenter As String, ByVal UpdateType As String, ByVal userState As Object)
            If (Me.GetSystemAddressOperationCompleted Is Nothing) Then
                Me.GetSystemAddressOperationCompleted = AddressOf Me.OnGetSystemAddressOperationCompleted
            End If
            Me.InvokeAsync("GetSystemAddress", New Object() {FactoryId, ProfitCenter, UpdateType}, Me.GetSystemAddressOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSystemAddressOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSystemAddressCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSystemAddressCompleted(Me, New GetSystemAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/GetSetting", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSetting(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal FactoryId As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal ProfitCenter As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal ParameterType As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal UserName As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal SettingCode As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByRef rtValue As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByRef rtMsg As String) As <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> String
            Dim results() As Object = Me.Invoke("GetSetting", New Object() {FactoryId, ProfitCenter, ParameterType, UserName, SettingCode})
            rtValue = CType(results(1),String)
            rtMsg = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSettingAsync(ByVal FactoryId As String, ByVal ProfitCenter As String, ByVal ParameterType As String, ByVal UserName As String, ByVal SettingCode As String)
            Me.GetSettingAsync(FactoryId, ProfitCenter, ParameterType, UserName, SettingCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSettingAsync(ByVal FactoryId As String, ByVal ProfitCenter As String, ByVal ParameterType As String, ByVal UserName As String, ByVal SettingCode As String, ByVal userState As Object)
            If (Me.GetSettingOperationCompleted Is Nothing) Then
                Me.GetSettingOperationCompleted = AddressOf Me.OnGetSettingOperationCompleted
            End If
            Me.InvokeAsync("GetSetting", New Object() {FactoryId, ProfitCenter, ParameterType, UserName, SettingCode}, Me.GetSettingOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSettingOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSettingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSettingCompleted(Me, New GetSettingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/GetSFCFile", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSFCFile(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal FactoryId As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal ProfitCenter As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal SFS01 As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByRef rtValue As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByRef rtMsg As String) As <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetSFCFile", New Object() {FactoryId, ProfitCenter, SFS01})
            rtValue = CType(results(1),String)
            rtMsg = CType(results(2),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSFCFileAsync(ByVal FactoryId As String, ByVal ProfitCenter As String, ByVal SFS01 As String)
            Me.GetSFCFileAsync(FactoryId, ProfitCenter, SFS01, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSFCFileAsync(ByVal FactoryId As String, ByVal ProfitCenter As String, ByVal SFS01 As String, ByVal userState As Object)
            If (Me.GetSFCFileOperationCompleted Is Nothing) Then
                Me.GetSFCFileOperationCompleted = AddressOf Me.OnGetSFCFileOperationCompleted
            End If
            Me.InvokeAsync("GetSFCFile", New Object() {FactoryId, ProfitCenter, SFS01}, Me.GetSFCFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSFCFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSFCFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSFCFileCompleted(Me, New GetSFCFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/ExecMaterialIssue", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExecMaterialIssue(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal FactoryId As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal ProfitCenter As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal UserName As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal SFB01 As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal ReelBarCode As String, ByRef RequirementQuantity As Single, <System.Xml.Serialization.XmlIgnoreAttribute()> ByRef RequirementQuantitySpecified As Boolean, ByRef TransactionQuantity As Single, <System.Xml.Serialization.XmlIgnoreAttribute()> ByRef TransactionQuantitySpecified As Boolean, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByRef rtValue As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByRef rtMsg As String) As <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> String
            Dim results() As Object = Me.Invoke("ExecMaterialIssue", New Object() {FactoryId, ProfitCenter, UserName, SFB01, ReelBarCode})
            RequirementQuantity = CType(results(1),Single)
            RequirementQuantitySpecified = CType(results(2),Boolean)
            TransactionQuantity = CType(results(3),Single)
            TransactionQuantitySpecified = CType(results(4),Boolean)
            rtValue = CType(results(5),String)
            rtMsg = CType(results(6),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExecMaterialIssueAsync(ByVal FactoryId As String, ByVal ProfitCenter As String, ByVal UserName As String, ByVal SFB01 As String, ByVal ReelBarCode As String)
            Me.ExecMaterialIssueAsync(FactoryId, ProfitCenter, UserName, SFB01, ReelBarCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExecMaterialIssueAsync(ByVal FactoryId As String, ByVal ProfitCenter As String, ByVal UserName As String, ByVal SFB01 As String, ByVal ReelBarCode As String, ByVal userState As Object)
            If (Me.ExecMaterialIssueOperationCompleted Is Nothing) Then
                Me.ExecMaterialIssueOperationCompleted = AddressOf Me.OnExecMaterialIssueOperationCompleted
            End If
            Me.InvokeAsync("ExecMaterialIssue", New Object() {FactoryId, ProfitCenter, UserName, SFB01, ReelBarCode}, Me.ExecMaterialIssueOperationCompleted, userState)
        End Sub
        
        Private Sub OnExecMaterialIssueOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExecMaterialIssueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExecMaterialIssueCompleted(Me, New ExecMaterialIssueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/GetSFCStatus", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSFCStatus(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal FactoryId As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal ProfitCenter As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal SFS01 As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByRef rtValue As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByRef rtMsg As String) As <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetSFCStatus", New Object() {FactoryId, ProfitCenter, SFS01})
            rtValue = CType(results(1),String)
            rtMsg = CType(results(2),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSFCStatusAsync(ByVal FactoryId As String, ByVal ProfitCenter As String, ByVal SFS01 As String)
            Me.GetSFCStatusAsync(FactoryId, ProfitCenter, SFS01, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSFCStatusAsync(ByVal FactoryId As String, ByVal ProfitCenter As String, ByVal SFS01 As String, ByVal userState As Object)
            If (Me.GetSFCStatusOperationCompleted Is Nothing) Then
                Me.GetSFCStatusOperationCompleted = AddressOf Me.OnGetSFCStatusOperationCompleted
            End If
            Me.InvokeAsync("GetSFCStatus", New Object() {FactoryId, ProfitCenter, SFS01}, Me.GetSFCStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSFCStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSFCStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSFCStatusCompleted(Me, New GetSFCStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://schemas.datacontract.org/2004/07/DAL")>  _
    Partial Public Class SqlParam
        
        Private _dateTypeField As DbType
        
        Private _fieldNameField As String
        
        Private _fieldValueField As Object
        
        '''<remarks/>
        Public Property _dateType() As DbType
            Get
                Return Me._dateTypeField
            End Get
            Set
                Me._dateTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property _fieldName() As String
            Get
                Return Me._fieldNameField
            End Get
            Set
                Me._fieldNameField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property _fieldValue() As Object
            Get
                Return Me._fieldValueField
            End Get
            Set
                Me._fieldValueField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://schemas.datacontract.org/2004/07/System.Data")>  _
    Public Enum DbType
        
        '''<remarks/>
        AnsiString
        
        '''<remarks/>
        Binary
        
        '''<remarks/>
        [Byte]
        
        '''<remarks/>
        [Boolean]
        
        '''<remarks/>
        Currency
        
        '''<remarks/>
        [Date]
        
        '''<remarks/>
        DateTime
        
        '''<remarks/>
        [Decimal]
        
        '''<remarks/>
        [Double]
        
        '''<remarks/>
        Guid
        
        '''<remarks/>
        Int16
        
        '''<remarks/>
        Int32
        
        '''<remarks/>
        Int64
        
        '''<remarks/>
        [Object]
        
        '''<remarks/>
        [SByte]
        
        '''<remarks/>
        [Single]
        
        '''<remarks/>
        [String]
        
        '''<remarks/>
        Time
        
        '''<remarks/>
        UInt16
        
        '''<remarks/>
        UInt32
        
        '''<remarks/>
        UInt64
        
        '''<remarks/>
        VarNumeric
        
        '''<remarks/>
        AnsiStringFixedLength
        
        '''<remarks/>
        StringFixedLength
        
        '''<remarks/>
        Xml
        
        '''<remarks/>
        DateTime2
        
        '''<remarks/>
        DateTimeOffset
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub GetDataFromSFCCompletedEventHandler(ByVal sender As Object, ByVal e As GetDataFromSFCCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDataFromSFCCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub InsertDataToSFCCompletedEventHandler(ByVal sender As Object, ByVal e As InsertDataToSFCCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertDataToSFCCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property InsertDataToSFCResult() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property InsertDataToSFCResultSpecified() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub GetTiptopBOMInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetTiptopBOMInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTiptopBOMInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rtValue() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rtMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub GetCheckEquipmentCompletedEventHandler(ByVal sender As Object, ByVal e As GetCheckEquipmentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCheckEquipmentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property GetCheckEquipmentResult() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property GetCheckEquipmentResultSpecified() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Quantity() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property QuantitySpecified() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ValidQuantity() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ValidQuantitySpecified() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(5),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rtValue() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(6),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rtMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(7),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub ExecEquipmentUpdateCompletedEventHandler(ByVal sender As Object, ByVal e As ExecEquipmentUpdateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExecEquipmentUpdateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property ExecEquipmentUpdateResult() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ExecEquipmentUpdateResultSpecified() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Quantity() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property QuantitySpecified() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ValidQuantity() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ValidQuantitySpecified() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(5),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rtValue() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(6),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rtMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(7),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub GetEncrytStringCompletedEventHandler(ByVal sender As Object, ByVal e As GetEncrytStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEncrytStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub InsertCADVersionCompletedEventHandler(ByVal sender As Object, ByVal e As InsertCADVersionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertCADVersionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property InsertCADVersionResult() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property InsertCADVersionResultSpecified() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rtValue() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rtMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub GetPLMECNCompletedEventHandler(ByVal sender As Object, ByVal e As GetPLMECNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPLMECNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rtValue() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rtMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub GetECNBomCompletedEventHandler(ByVal sender As Object, ByVal e As GetECNBomCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetECNBomCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rtValue() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rtMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub ExecECNBomUpdateCompletedEventHandler(ByVal sender As Object, ByVal e As ExecECNBomUpdateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExecECNBomUpdateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property ExecECNBomUpdateResult() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ExecECNBomUpdateResultSpecified() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rtValue() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rtMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub GetSystemAddressCompletedEventHandler(ByVal sender As Object, ByVal e As GetSystemAddressCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSystemAddressCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rtValue() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rtMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub GetSettingCompletedEventHandler(ByVal sender As Object, ByVal e As GetSettingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSettingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rtValue() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rtMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub GetSFCFileCompletedEventHandler(ByVal sender As Object, ByVal e As GetSFCFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSFCFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rtValue() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rtMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub ExecMaterialIssueCompletedEventHandler(ByVal sender As Object, ByVal e As ExecMaterialIssueCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExecMaterialIssueCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property RequirementQuantity() As Single
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Single)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property RequirementQuantitySpecified() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property TransactionQuantity() As Single
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),Single)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property TransactionQuantitySpecified() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rtValue() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(5),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rtMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(6),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub GetSFCStatusCompletedEventHandler(ByVal sender As Object, ByVal e As GetSFCStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSFCStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rtValue() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rtMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
End Namespace
