'------------------------------------------------------------------------------
' <auto-generated>
'     此代码由工具生成。
'     运行时版本:2.0.50727.5483
'
'     对此文件的更改可能会导致不正确的行为，并且如果
'     重新生成代码，这些更改将会丢失。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("RunCardDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class RunCardDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableRunCardDataTable As RunCardDataTableDataTable
    
    Private tableRunCardDetailListDataTable As RunCardDetailListDataTableDataTable
    
    Private tableProcessCard As ProcessCardDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("RunCardDataTable")) Is Nothing) Then
                MyBase.Tables.Add(New RunCardDataTableDataTable(ds.Tables("RunCardDataTable")))
            End If
            If (Not (ds.Tables("RunCardDetailListDataTable")) Is Nothing) Then
                MyBase.Tables.Add(New RunCardDetailListDataTableDataTable(ds.Tables("RunCardDetailListDataTable")))
            End If
            If (Not (ds.Tables("ProcessCard")) Is Nothing) Then
                MyBase.Tables.Add(New ProcessCardDataTable(ds.Tables("ProcessCard")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RunCardDataTable() As RunCardDataTableDataTable
        Get
            Return Me.tableRunCardDataTable
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RunCardDetailListDataTable() As RunCardDetailListDataTableDataTable
        Get
            Return Me.tableRunCardDetailListDataTable
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ProcessCard() As ProcessCardDataTable
        Get
            Return Me.tableProcessCard
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As RunCardDataSet = CType(MyBase.Clone,RunCardDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("RunCardDataTable")) Is Nothing) Then
                MyBase.Tables.Add(New RunCardDataTableDataTable(ds.Tables("RunCardDataTable")))
            End If
            If (Not (ds.Tables("RunCardDetailListDataTable")) Is Nothing) Then
                MyBase.Tables.Add(New RunCardDetailListDataTableDataTable(ds.Tables("RunCardDetailListDataTable")))
            End If
            If (Not (ds.Tables("ProcessCard")) Is Nothing) Then
                MyBase.Tables.Add(New ProcessCardDataTable(ds.Tables("ProcessCard")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableRunCardDataTable = CType(MyBase.Tables("RunCardDataTable"),RunCardDataTableDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRunCardDataTable) Is Nothing) Then
                Me.tableRunCardDataTable.InitVars
            End If
        End If
        Me.tableRunCardDetailListDataTable = CType(MyBase.Tables("RunCardDetailListDataTable"),RunCardDetailListDataTableDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRunCardDetailListDataTable) Is Nothing) Then
                Me.tableRunCardDetailListDataTable.InitVars
            End If
        End If
        Me.tableProcessCard = CType(MyBase.Tables("ProcessCard"),ProcessCardDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProcessCard) Is Nothing) Then
                Me.tableProcessCard.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "RunCardDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/RunCardDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableRunCardDataTable = New RunCardDataTableDataTable
        MyBase.Tables.Add(Me.tableRunCardDataTable)
        Me.tableRunCardDetailListDataTable = New RunCardDetailListDataTableDataTable
        MyBase.Tables.Add(Me.tableRunCardDetailListDataTable)
        Me.tableProcessCard = New ProcessCardDataTable
        MyBase.Tables.Add(Me.tableProcessCard)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRunCardDataTable() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRunCardDetailListDataTable() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeProcessCard() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As RunCardDataSet = New RunCardDataSet
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub RunCardDataTableRowChangeEventHandler(ByVal sender As Object, ByVal e As RunCardDataTableRowChangeEvent)
    
    Public Delegate Sub RunCardDetailListDataTableRowChangeEventHandler(ByVal sender As Object, ByVal e As RunCardDetailListDataTableRowChangeEvent)
    
    Public Delegate Sub ProcessCardRowChangeEventHandler(ByVal sender As Object, ByVal e As ProcessCardRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RunCardDataTableDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnWorkStationContent As Global.System.Data.DataColumn
        
        Private columnLaborHour As Global.System.Data.DataColumn
        
        Private columnEquipment As Global.System.Data.DataColumn
        
        Private columnProcessStandard As Global.System.Data.DataColumn
        
        Private columnComment As Global.System.Data.DataColumn
        
        Private columnRawInfo As Global.System.Data.DataColumn
        
        Private columnEquipmentInfo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RunCardDataTable"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WorkStationContentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWorkStationContent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LaborHourColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLaborHour
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EquipmentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEquipment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProcessStandardColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProcessStandard
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RawInfoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRawInfo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EquipmentInfoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEquipmentInfo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RunCardDataTableRow
            Get
                Return CType(Me.Rows(index),RunCardDataTableRow)
            End Get
        End Property
        
        Public Event RunCardDataTableRowChanging As RunCardDataTableRowChangeEventHandler
        
        Public Event RunCardDataTableRowChanged As RunCardDataTableRowChangeEventHandler
        
        Public Event RunCardDataTableRowDeleting As RunCardDataTableRowChangeEventHandler
        
        Public Event RunCardDataTableRowDeleted As RunCardDataTableRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRunCardDataTableRow(ByVal row As RunCardDataTableRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRunCardDataTableRow(ByVal ID As String, ByVal WorkStationContent As String, ByVal LaborHour As Double, ByVal Equipment As String, ByVal ProcessStandard As String, ByVal Comment As String, ByVal RawInfo As String, ByVal EquipmentInfo As String) As RunCardDataTableRow
            Dim rowRunCardDataTableRow As RunCardDataTableRow = CType(Me.NewRow,RunCardDataTableRow)
            Dim columnValuesArray() As Object = New Object() {ID, WorkStationContent, LaborHour, Equipment, ProcessStandard, Comment, RawInfo, EquipmentInfo}
            rowRunCardDataTableRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRunCardDataTableRow)
            Return rowRunCardDataTableRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RunCardDataTableDataTable = CType(MyBase.Clone,RunCardDataTableDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RunCardDataTableDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnWorkStationContent = MyBase.Columns("WorkStationContent")
            Me.columnLaborHour = MyBase.Columns("LaborHour")
            Me.columnEquipment = MyBase.Columns("Equipment")
            Me.columnProcessStandard = MyBase.Columns("ProcessStandard")
            Me.columnComment = MyBase.Columns("Comment")
            Me.columnRawInfo = MyBase.Columns("RawInfo")
            Me.columnEquipmentInfo = MyBase.Columns("EquipmentInfo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnWorkStationContent = New Global.System.Data.DataColumn("WorkStationContent", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWorkStationContent)
            Me.columnLaborHour = New Global.System.Data.DataColumn("LaborHour", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLaborHour)
            Me.columnEquipment = New Global.System.Data.DataColumn("Equipment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEquipment)
            Me.columnProcessStandard = New Global.System.Data.DataColumn("ProcessStandard", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProcessStandard)
            Me.columnComment = New Global.System.Data.DataColumn("Comment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComment)
            Me.columnRawInfo = New Global.System.Data.DataColumn("RawInfo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRawInfo)
            Me.columnEquipmentInfo = New Global.System.Data.DataColumn("EquipmentInfo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEquipmentInfo)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRunCardDataTableRow() As RunCardDataTableRow
            Return CType(Me.NewRow,RunCardDataTableRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RunCardDataTableRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RunCardDataTableRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RunCardDataTableRowChangedEvent) Is Nothing) Then
                RaiseEvent RunCardDataTableRowChanged(Me, New RunCardDataTableRowChangeEvent(CType(e.Row,RunCardDataTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RunCardDataTableRowChangingEvent) Is Nothing) Then
                RaiseEvent RunCardDataTableRowChanging(Me, New RunCardDataTableRowChangeEvent(CType(e.Row,RunCardDataTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RunCardDataTableRowDeletedEvent) Is Nothing) Then
                RaiseEvent RunCardDataTableRowDeleted(Me, New RunCardDataTableRowChangeEvent(CType(e.Row,RunCardDataTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RunCardDataTableRowDeletingEvent) Is Nothing) Then
                RaiseEvent RunCardDataTableRowDeleting(Me, New RunCardDataTableRowChangeEvent(CType(e.Row,RunCardDataTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRunCardDataTableRow(ByVal row As RunCardDataTableRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As RunCardDataSet = New RunCardDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RunCardDataTableDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RunCardDetailListDataTableDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPn As Global.System.Data.DataColumn
        
        Private columnVersion As Global.System.Data.DataColumn
        
        Private columnQty As Global.System.Data.DataColumn
        
        Private columnTotalHourPreChild As Global.System.Data.DataColumn
        
        Private columnPreAssemblyHourPreChild As Global.System.Data.DataColumn
        
        Private columnAssemblyHourPreChild As Global.System.Data.DataColumn
        
        Private columnMadeHourPreChild As Global.System.Data.DataColumn
        
        Private columnPreAssemblyHourPreMo As Global.System.Data.DataColumn
        
        Private columnAssemblyHourPreMo As Global.System.Data.DataColumn
        
        Private columnMadeHourPreMo As Global.System.Data.DataColumn
        
        Private columnID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RunCardDetailListDataTable"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VersionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVersion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalHourPreChildColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalHourPreChild
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PreAssemblyHourPreChildColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPreAssemblyHourPreChild
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AssemblyHourPreChildColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAssemblyHourPreChild
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MadeHourPreChildColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMadeHourPreChild
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PreAssemblyHourPreMoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPreAssemblyHourPreMo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AssemblyHourPreMoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAssemblyHourPreMo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MadeHourPreMoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMadeHourPreMo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RunCardDetailListDataTableRow
            Get
                Return CType(Me.Rows(index),RunCardDetailListDataTableRow)
            End Get
        End Property
        
        Public Event RunCardDetailListDataTableRowChanging As RunCardDetailListDataTableRowChangeEventHandler
        
        Public Event RunCardDetailListDataTableRowChanged As RunCardDetailListDataTableRowChangeEventHandler
        
        Public Event RunCardDetailListDataTableRowDeleting As RunCardDetailListDataTableRowChangeEventHandler
        
        Public Event RunCardDetailListDataTableRowDeleted As RunCardDetailListDataTableRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRunCardDetailListDataTableRow(ByVal row As RunCardDetailListDataTableRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRunCardDetailListDataTableRow(ByVal Pn As String, ByVal Version As String, ByVal Qty As Integer, ByVal TotalHourPreChild As Double, ByVal PreAssemblyHourPreChild As Double, ByVal AssemblyHourPreChild As Double, ByVal MadeHourPreChild As Double, ByVal PreAssemblyHourPreMo As Double, ByVal AssemblyHourPreMo As Double, ByVal MadeHourPreMo As Double, ByVal ID As String) As RunCardDetailListDataTableRow
            Dim rowRunCardDetailListDataTableRow As RunCardDetailListDataTableRow = CType(Me.NewRow,RunCardDetailListDataTableRow)
            Dim columnValuesArray() As Object = New Object() {Pn, Version, Qty, TotalHourPreChild, PreAssemblyHourPreChild, AssemblyHourPreChild, MadeHourPreChild, PreAssemblyHourPreMo, AssemblyHourPreMo, MadeHourPreMo, ID}
            rowRunCardDetailListDataTableRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRunCardDetailListDataTableRow)
            Return rowRunCardDetailListDataTableRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RunCardDetailListDataTableDataTable = CType(MyBase.Clone,RunCardDetailListDataTableDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RunCardDetailListDataTableDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPn = MyBase.Columns("Pn")
            Me.columnVersion = MyBase.Columns("Version")
            Me.columnQty = MyBase.Columns("Qty")
            Me.columnTotalHourPreChild = MyBase.Columns("TotalHourPreChild")
            Me.columnPreAssemblyHourPreChild = MyBase.Columns("PreAssemblyHourPreChild")
            Me.columnAssemblyHourPreChild = MyBase.Columns("AssemblyHourPreChild")
            Me.columnMadeHourPreChild = MyBase.Columns("MadeHourPreChild")
            Me.columnPreAssemblyHourPreMo = MyBase.Columns("PreAssemblyHourPreMo")
            Me.columnAssemblyHourPreMo = MyBase.Columns("AssemblyHourPreMo")
            Me.columnMadeHourPreMo = MyBase.Columns("MadeHourPreMo")
            Me.columnID = MyBase.Columns("ID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPn = New Global.System.Data.DataColumn("Pn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPn)
            Me.columnVersion = New Global.System.Data.DataColumn("Version", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVersion)
            Me.columnQty = New Global.System.Data.DataColumn("Qty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty)
            Me.columnTotalHourPreChild = New Global.System.Data.DataColumn("TotalHourPreChild", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalHourPreChild)
            Me.columnPreAssemblyHourPreChild = New Global.System.Data.DataColumn("PreAssemblyHourPreChild", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPreAssemblyHourPreChild)
            Me.columnAssemblyHourPreChild = New Global.System.Data.DataColumn("AssemblyHourPreChild", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssemblyHourPreChild)
            Me.columnMadeHourPreChild = New Global.System.Data.DataColumn("MadeHourPreChild", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMadeHourPreChild)
            Me.columnPreAssemblyHourPreMo = New Global.System.Data.DataColumn("PreAssemblyHourPreMo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPreAssemblyHourPreMo)
            Me.columnAssemblyHourPreMo = New Global.System.Data.DataColumn("AssemblyHourPreMo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssemblyHourPreMo)
            Me.columnMadeHourPreMo = New Global.System.Data.DataColumn("MadeHourPreMo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMadeHourPreMo)
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRunCardDetailListDataTableRow() As RunCardDetailListDataTableRow
            Return CType(Me.NewRow,RunCardDetailListDataTableRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RunCardDetailListDataTableRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RunCardDetailListDataTableRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RunCardDetailListDataTableRowChangedEvent) Is Nothing) Then
                RaiseEvent RunCardDetailListDataTableRowChanged(Me, New RunCardDetailListDataTableRowChangeEvent(CType(e.Row,RunCardDetailListDataTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RunCardDetailListDataTableRowChangingEvent) Is Nothing) Then
                RaiseEvent RunCardDetailListDataTableRowChanging(Me, New RunCardDetailListDataTableRowChangeEvent(CType(e.Row,RunCardDetailListDataTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RunCardDetailListDataTableRowDeletedEvent) Is Nothing) Then
                RaiseEvent RunCardDetailListDataTableRowDeleted(Me, New RunCardDetailListDataTableRowChangeEvent(CType(e.Row,RunCardDetailListDataTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RunCardDetailListDataTableRowDeletingEvent) Is Nothing) Then
                RaiseEvent RunCardDetailListDataTableRowDeleting(Me, New RunCardDetailListDataTableRowChangeEvent(CType(e.Row,RunCardDetailListDataTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRunCardDetailListDataTableRow(ByVal row As RunCardDetailListDataTableRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As RunCardDataSet = New RunCardDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RunCardDetailListDataTableDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ProcessCardDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnWorkStationContent As Global.System.Data.DataColumn
        
        Private columnEquipment As Global.System.Data.DataColumn
        
        Private columnProcessStandand As Global.System.Data.DataColumn
        
        Private columnComment As Global.System.Data.DataColumn
        
        Private columnFunctionBarcode As Global.System.Data.DataColumn
        
        Private columnMoId As Global.System.Data.DataColumn
        
        Private columnPn As Global.System.Data.DataColumn
        
        Private columnMoQty As Global.System.Data.DataColumn
        
        Private columnConfigQty As Global.System.Data.DataColumn
        
        Private columnMQty As Global.System.Data.DataColumn
        
        Private columnBarcodePath As Global.System.Data.DataColumn
        
        Private columnPBarcode As Global.System.Data.DataColumn
        
        Private columnMoBarcode As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ProcessCard"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WorkStationContentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWorkStationContent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EquipmentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEquipment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProcessStandandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProcessStandand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FunctionBarcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFunctionBarcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MoIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMoId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MoQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMoQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConfigQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConfigQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BarcodePathColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBarcodePath
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PBarcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPBarcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MoBarcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMoBarcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProcessCardRow
            Get
                Return CType(Me.Rows(index),ProcessCardRow)
            End Get
        End Property
        
        Public Event ProcessCardRowChanging As ProcessCardRowChangeEventHandler
        
        Public Event ProcessCardRowChanged As ProcessCardRowChangeEventHandler
        
        Public Event ProcessCardRowDeleting As ProcessCardRowChangeEventHandler
        
        Public Event ProcessCardRowDeleted As ProcessCardRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddProcessCardRow(ByVal row As ProcessCardRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddProcessCardRow(ByVal WorkStationContent As String, ByVal Equipment As String, ByVal ProcessStandand As String, ByVal Comment As String, ByVal FunctionBarcode As String, ByVal MoId As String, ByVal Pn As String, ByVal MoQty As Integer, ByVal ConfigQty As String, ByVal MQty As Integer, ByVal BarcodePath() As Byte, ByVal PBarcode() As Byte, ByVal MoBarcode() As Byte) As ProcessCardRow
            Dim rowProcessCardRow As ProcessCardRow = CType(Me.NewRow,ProcessCardRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, WorkStationContent, Equipment, ProcessStandand, Comment, FunctionBarcode, MoId, Pn, MoQty, ConfigQty, MQty, BarcodePath, PBarcode, MoBarcode}
            rowProcessCardRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowProcessCardRow)
            Return rowProcessCardRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ProcessCardDataTable = CType(MyBase.Clone,ProcessCardDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ProcessCardDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnWorkStationContent = MyBase.Columns("WorkStationContent")
            Me.columnEquipment = MyBase.Columns("Equipment")
            Me.columnProcessStandand = MyBase.Columns("ProcessStandand")
            Me.columnComment = MyBase.Columns("Comment")
            Me.columnFunctionBarcode = MyBase.Columns("FunctionBarcode")
            Me.columnMoId = MyBase.Columns("MoId")
            Me.columnPn = MyBase.Columns("Pn")
            Me.columnMoQty = MyBase.Columns("MoQty")
            Me.columnConfigQty = MyBase.Columns("ConfigQty")
            Me.columnMQty = MyBase.Columns("MQty")
            Me.columnBarcodePath = MyBase.Columns("BarcodePath")
            Me.columnPBarcode = MyBase.Columns("PBarcode")
            Me.columnMoBarcode = MyBase.Columns("MoBarcode")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnWorkStationContent = New Global.System.Data.DataColumn("WorkStationContent", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWorkStationContent)
            Me.columnEquipment = New Global.System.Data.DataColumn("Equipment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEquipment)
            Me.columnProcessStandand = New Global.System.Data.DataColumn("ProcessStandand", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProcessStandand)
            Me.columnComment = New Global.System.Data.DataColumn("Comment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComment)
            Me.columnFunctionBarcode = New Global.System.Data.DataColumn("FunctionBarcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFunctionBarcode)
            Me.columnMoId = New Global.System.Data.DataColumn("MoId", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMoId)
            Me.columnPn = New Global.System.Data.DataColumn("Pn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPn)
            Me.columnMoQty = New Global.System.Data.DataColumn("MoQty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMoQty)
            Me.columnConfigQty = New Global.System.Data.DataColumn("ConfigQty", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConfigQty)
            Me.columnMQty = New Global.System.Data.DataColumn("MQty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMQty)
            Me.columnBarcodePath = New Global.System.Data.DataColumn("BarcodePath", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBarcodePath)
            Me.columnPBarcode = New Global.System.Data.DataColumn("PBarcode", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPBarcode)
            Me.columnMoBarcode = New Global.System.Data.DataColumn("MoBarcode", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMoBarcode)
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewProcessCardRow() As ProcessCardRow
            Return CType(Me.NewRow,ProcessCardRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ProcessCardRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ProcessCardRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProcessCardRowChangedEvent) Is Nothing) Then
                RaiseEvent ProcessCardRowChanged(Me, New ProcessCardRowChangeEvent(CType(e.Row,ProcessCardRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProcessCardRowChangingEvent) Is Nothing) Then
                RaiseEvent ProcessCardRowChanging(Me, New ProcessCardRowChangeEvent(CType(e.Row,ProcessCardRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProcessCardRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProcessCardRowDeleted(Me, New ProcessCardRowChangeEvent(CType(e.Row,ProcessCardRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProcessCardRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProcessCardRowDeleting(Me, New ProcessCardRowChangeEvent(CType(e.Row,ProcessCardRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveProcessCardRow(ByVal row As ProcessCardRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As RunCardDataSet = New RunCardDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ProcessCardDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RunCardDataTableRow
        Inherits Global.System.Data.DataRow
        
        Private tableRunCardDataTable As RunCardDataTableDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRunCardDataTable = CType(Me.Table,RunCardDataTableDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableRunCardDataTable.IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““RunCardDataTable””中列““ID””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableRunCardDataTable.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WorkStationContent() As String
            Get
                Try 
                    Return CType(Me(Me.tableRunCardDataTable.WorkStationContentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““RunCardDataTable””中列““WorkStationContent””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableRunCardDataTable.WorkStationContentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LaborHour() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRunCardDataTable.LaborHourColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““RunCardDataTable””中列““LaborHour””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableRunCardDataTable.LaborHourColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Equipment() As String
            Get
                Try 
                    Return CType(Me(Me.tableRunCardDataTable.EquipmentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““RunCardDataTable””中列““Equipment””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableRunCardDataTable.EquipmentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProcessStandard() As String
            Get
                Try 
                    Return CType(Me(Me.tableRunCardDataTable.ProcessStandardColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““RunCardDataTable””中列““ProcessStandard””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableRunCardDataTable.ProcessStandardColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Comment() As String
            Get
                Try 
                    Return CType(Me(Me.tableRunCardDataTable.CommentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““RunCardDataTable””中列““Comment””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableRunCardDataTable.CommentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RawInfo() As String
            Get
                Try 
                    Return CType(Me(Me.tableRunCardDataTable.RawInfoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““RunCardDataTable””中列““RawInfo””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableRunCardDataTable.RawInfoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EquipmentInfo() As String
            Get
                Try 
                    Return CType(Me(Me.tableRunCardDataTable.EquipmentInfoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““RunCardDataTable””中列““EquipmentInfo””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableRunCardDataTable.EquipmentInfoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableRunCardDataTable.IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDNull()
            Me(Me.tableRunCardDataTable.IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWorkStationContentNull() As Boolean
            Return Me.IsNull(Me.tableRunCardDataTable.WorkStationContentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWorkStationContentNull()
            Me(Me.tableRunCardDataTable.WorkStationContentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLaborHourNull() As Boolean
            Return Me.IsNull(Me.tableRunCardDataTable.LaborHourColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLaborHourNull()
            Me(Me.tableRunCardDataTable.LaborHourColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEquipmentNull() As Boolean
            Return Me.IsNull(Me.tableRunCardDataTable.EquipmentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEquipmentNull()
            Me(Me.tableRunCardDataTable.EquipmentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProcessStandardNull() As Boolean
            Return Me.IsNull(Me.tableRunCardDataTable.ProcessStandardColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProcessStandardNull()
            Me(Me.tableRunCardDataTable.ProcessStandardColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommentNull() As Boolean
            Return Me.IsNull(Me.tableRunCardDataTable.CommentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommentNull()
            Me(Me.tableRunCardDataTable.CommentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRawInfoNull() As Boolean
            Return Me.IsNull(Me.tableRunCardDataTable.RawInfoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRawInfoNull()
            Me(Me.tableRunCardDataTable.RawInfoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEquipmentInfoNull() As Boolean
            Return Me.IsNull(Me.tableRunCardDataTable.EquipmentInfoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEquipmentInfoNull()
            Me(Me.tableRunCardDataTable.EquipmentInfoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RunCardDetailListDataTableRow
        Inherits Global.System.Data.DataRow
        
        Private tableRunCardDetailListDataTable As RunCardDetailListDataTableDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRunCardDetailListDataTable = CType(Me.Table,RunCardDetailListDataTableDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pn() As String
            Get
                Try 
                    Return CType(Me(Me.tableRunCardDetailListDataTable.PnColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““RunCardDetailListDataTable””中列““Pn””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableRunCardDetailListDataTable.PnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Version() As String
            Get
                Try 
                    Return CType(Me(Me.tableRunCardDetailListDataTable.VersionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““RunCardDetailListDataTable””中列““Version””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableRunCardDetailListDataTable.VersionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRunCardDetailListDataTable.QtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““RunCardDetailListDataTable””中列““Qty””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableRunCardDetailListDataTable.QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalHourPreChild() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRunCardDetailListDataTable.TotalHourPreChildColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““RunCardDetailListDataTable””中列““TotalHourPreChild””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableRunCardDetailListDataTable.TotalHourPreChildColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PreAssemblyHourPreChild() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRunCardDetailListDataTable.PreAssemblyHourPreChildColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““RunCardDetailListDataTable””中列““PreAssemblyHourPreChild””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableRunCardDetailListDataTable.PreAssemblyHourPreChildColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AssemblyHourPreChild() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRunCardDetailListDataTable.AssemblyHourPreChildColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““RunCardDetailListDataTable””中列““AssemblyHourPreChild””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableRunCardDetailListDataTable.AssemblyHourPreChildColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MadeHourPreChild() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRunCardDetailListDataTable.MadeHourPreChildColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““RunCardDetailListDataTable””中列““MadeHourPreChild””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableRunCardDetailListDataTable.MadeHourPreChildColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PreAssemblyHourPreMo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRunCardDetailListDataTable.PreAssemblyHourPreMoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““RunCardDetailListDataTable””中列““PreAssemblyHourPreMo””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableRunCardDetailListDataTable.PreAssemblyHourPreMoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AssemblyHourPreMo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRunCardDetailListDataTable.AssemblyHourPreMoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““RunCardDetailListDataTable””中列““AssemblyHourPreMo””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableRunCardDetailListDataTable.AssemblyHourPreMoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MadeHourPreMo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRunCardDetailListDataTable.MadeHourPreMoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““RunCardDetailListDataTable””中列““MadeHourPreMo””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableRunCardDetailListDataTable.MadeHourPreMoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableRunCardDetailListDataTable.IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““RunCardDetailListDataTable””中列““ID””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableRunCardDetailListDataTable.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPnNull() As Boolean
            Return Me.IsNull(Me.tableRunCardDetailListDataTable.PnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPnNull()
            Me(Me.tableRunCardDetailListDataTable.PnColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVersionNull() As Boolean
            Return Me.IsNull(Me.tableRunCardDetailListDataTable.VersionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVersionNull()
            Me(Me.tableRunCardDetailListDataTable.VersionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQtyNull() As Boolean
            Return Me.IsNull(Me.tableRunCardDetailListDataTable.QtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQtyNull()
            Me(Me.tableRunCardDetailListDataTable.QtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalHourPreChildNull() As Boolean
            Return Me.IsNull(Me.tableRunCardDetailListDataTable.TotalHourPreChildColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalHourPreChildNull()
            Me(Me.tableRunCardDetailListDataTable.TotalHourPreChildColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPreAssemblyHourPreChildNull() As Boolean
            Return Me.IsNull(Me.tableRunCardDetailListDataTable.PreAssemblyHourPreChildColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPreAssemblyHourPreChildNull()
            Me(Me.tableRunCardDetailListDataTable.PreAssemblyHourPreChildColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAssemblyHourPreChildNull() As Boolean
            Return Me.IsNull(Me.tableRunCardDetailListDataTable.AssemblyHourPreChildColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAssemblyHourPreChildNull()
            Me(Me.tableRunCardDetailListDataTable.AssemblyHourPreChildColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMadeHourPreChildNull() As Boolean
            Return Me.IsNull(Me.tableRunCardDetailListDataTable.MadeHourPreChildColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMadeHourPreChildNull()
            Me(Me.tableRunCardDetailListDataTable.MadeHourPreChildColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPreAssemblyHourPreMoNull() As Boolean
            Return Me.IsNull(Me.tableRunCardDetailListDataTable.PreAssemblyHourPreMoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPreAssemblyHourPreMoNull()
            Me(Me.tableRunCardDetailListDataTable.PreAssemblyHourPreMoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAssemblyHourPreMoNull() As Boolean
            Return Me.IsNull(Me.tableRunCardDetailListDataTable.AssemblyHourPreMoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAssemblyHourPreMoNull()
            Me(Me.tableRunCardDetailListDataTable.AssemblyHourPreMoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMadeHourPreMoNull() As Boolean
            Return Me.IsNull(Me.tableRunCardDetailListDataTable.MadeHourPreMoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMadeHourPreMoNull()
            Me(Me.tableRunCardDetailListDataTable.MadeHourPreMoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableRunCardDetailListDataTable.IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDNull()
            Me(Me.tableRunCardDetailListDataTable.IDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ProcessCardRow
        Inherits Global.System.Data.DataRow
        
        Private tableProcessCard As ProcessCardDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableProcessCard = CType(Me.Table,ProcessCardDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableProcessCard.IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““ProcessCard””中列““ID””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableProcessCard.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WorkStationContent() As String
            Get
                Try 
                    Return CType(Me(Me.tableProcessCard.WorkStationContentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““ProcessCard””中列““WorkStationContent””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableProcessCard.WorkStationContentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Equipment() As String
            Get
                Try 
                    Return CType(Me(Me.tableProcessCard.EquipmentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““ProcessCard””中列““Equipment””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableProcessCard.EquipmentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProcessStandand() As String
            Get
                Try 
                    Return CType(Me(Me.tableProcessCard.ProcessStandandColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““ProcessCard””中列““ProcessStandand””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableProcessCard.ProcessStandandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Comment() As String
            Get
                Try 
                    Return CType(Me(Me.tableProcessCard.CommentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““ProcessCard””中列““Comment””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableProcessCard.CommentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FunctionBarcode() As String
            Get
                Try 
                    Return CType(Me(Me.tableProcessCard.FunctionBarcodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““ProcessCard””中列““FunctionBarcode””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableProcessCard.FunctionBarcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MoId() As String
            Get
                Try 
                    Return CType(Me(Me.tableProcessCard.MoIdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““ProcessCard””中列““MoId””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableProcessCard.MoIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pn() As String
            Get
                Try 
                    Return CType(Me(Me.tableProcessCard.PnColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““ProcessCard””中列““Pn””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableProcessCard.PnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MoQty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableProcessCard.MoQtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““ProcessCard””中列““MoQty””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableProcessCard.MoQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ConfigQty() As String
            Get
                Try 
                    Return CType(Me(Me.tableProcessCard.ConfigQtyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““ProcessCard””中列““ConfigQty””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableProcessCard.ConfigQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MQty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableProcessCard.MQtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““ProcessCard””中列““MQty””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableProcessCard.MQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BarcodePath() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableProcessCard.BarcodePathColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““ProcessCard””中列““BarcodePath””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableProcessCard.BarcodePathColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PBarcode() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableProcessCard.PBarcodeColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““ProcessCard””中列““PBarcode””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableProcessCard.PBarcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MoBarcode() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableProcessCard.MoBarcodeColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““ProcessCard””中列““MoBarcode””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableProcessCard.MoBarcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableProcessCard.IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDNull()
            Me(Me.tableProcessCard.IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWorkStationContentNull() As Boolean
            Return Me.IsNull(Me.tableProcessCard.WorkStationContentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWorkStationContentNull()
            Me(Me.tableProcessCard.WorkStationContentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEquipmentNull() As Boolean
            Return Me.IsNull(Me.tableProcessCard.EquipmentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEquipmentNull()
            Me(Me.tableProcessCard.EquipmentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProcessStandandNull() As Boolean
            Return Me.IsNull(Me.tableProcessCard.ProcessStandandColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProcessStandandNull()
            Me(Me.tableProcessCard.ProcessStandandColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommentNull() As Boolean
            Return Me.IsNull(Me.tableProcessCard.CommentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommentNull()
            Me(Me.tableProcessCard.CommentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFunctionBarcodeNull() As Boolean
            Return Me.IsNull(Me.tableProcessCard.FunctionBarcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFunctionBarcodeNull()
            Me(Me.tableProcessCard.FunctionBarcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMoIdNull() As Boolean
            Return Me.IsNull(Me.tableProcessCard.MoIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMoIdNull()
            Me(Me.tableProcessCard.MoIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPnNull() As Boolean
            Return Me.IsNull(Me.tableProcessCard.PnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPnNull()
            Me(Me.tableProcessCard.PnColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMoQtyNull() As Boolean
            Return Me.IsNull(Me.tableProcessCard.MoQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMoQtyNull()
            Me(Me.tableProcessCard.MoQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConfigQtyNull() As Boolean
            Return Me.IsNull(Me.tableProcessCard.ConfigQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConfigQtyNull()
            Me(Me.tableProcessCard.ConfigQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMQtyNull() As Boolean
            Return Me.IsNull(Me.tableProcessCard.MQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMQtyNull()
            Me(Me.tableProcessCard.MQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBarcodePathNull() As Boolean
            Return Me.IsNull(Me.tableProcessCard.BarcodePathColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBarcodePathNull()
            Me(Me.tableProcessCard.BarcodePathColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPBarcodeNull() As Boolean
            Return Me.IsNull(Me.tableProcessCard.PBarcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPBarcodeNull()
            Me(Me.tableProcessCard.PBarcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMoBarcodeNull() As Boolean
            Return Me.IsNull(Me.tableProcessCard.MoBarcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMoBarcodeNull()
            Me(Me.tableProcessCard.MoBarcodeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RunCardDataTableRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RunCardDataTableRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RunCardDataTableRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RunCardDataTableRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RunCardDetailListDataTableRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RunCardDetailListDataTableRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RunCardDetailListDataTableRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RunCardDetailListDataTableRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ProcessCardRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ProcessCardRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ProcessCardRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ProcessCardRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
