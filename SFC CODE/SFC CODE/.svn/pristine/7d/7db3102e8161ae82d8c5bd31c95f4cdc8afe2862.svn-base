'------------------------------------------------------------------------------
' <auto-generated>
'     此代码由工具生成。
'     运行时版本:4.0.30319.34209
'
'     对此文件的更改可能会导致不正确的行为，并且如果
'     重新生成代码，这些更改将会丢失。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'此源代码是由 Microsoft.VSDesigner 4.0.30319.34209 版自动生成。
'
Namespace com.luxshare_ict.plm
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="WebService1Soap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class WebService1
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private GetPLMClassificationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPLMCADDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPLMClassificationECNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPLMClassificationECN2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPLMDocumentUsesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetModifyDescOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckRDNExistOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRDNDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBOMDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPLMDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPLMDataByIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPLMData_currentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.RCard.My.MySettings.Default.RCard_com_luxshare_ict_plm_WebService1
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event GetPLMClassificationCompleted As GetPLMClassificationCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPLMCADDCompleted As GetPLMCADDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPLMClassificationECNCompleted As GetPLMClassificationECNCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPLMClassificationECN2Completed As GetPLMClassificationECN2CompletedEventHandler
        
        '''<remarks/>
        Public Event GetPLMDocumentUsesCompleted As GetPLMDocumentUsesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetModifyDescCompleted As GetModifyDescCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckRDNExistCompleted As CheckRDNExistCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRDNDataCompleted As GetRDNDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBOMDataCompleted As GetBOMDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPLMDataCompleted As GetPLMDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPLMDataByIdCompleted As GetPLMDataByIdCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPLMData_currentCompleted As GetPLMData_currentCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertUserCompleted As InsertUserCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPLMClassification", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPLMClassification(ByVal guid As String, ByVal part As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetPLMClassification", New Object() {guid, part})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPLMClassificationAsync(ByVal guid As String, ByVal part As String)
            Me.GetPLMClassificationAsync(guid, part, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPLMClassificationAsync(ByVal guid As String, ByVal part As String, ByVal userState As Object)
            If (Me.GetPLMClassificationOperationCompleted Is Nothing) Then
                Me.GetPLMClassificationOperationCompleted = AddressOf Me.OnGetPLMClassificationOperationCompleted
            End If
            Me.InvokeAsync("GetPLMClassification", New Object() {guid, part}, Me.GetPLMClassificationOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPLMClassificationOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPLMClassificationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPLMClassificationCompleted(Me, New GetPLMClassificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPLMCADD", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPLMCADD(ByVal guid As String, ByVal part As String, ByVal classification As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetPLMCADD", New Object() {guid, part, classification})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPLMCADDAsync(ByVal guid As String, ByVal part As String, ByVal classification As String)
            Me.GetPLMCADDAsync(guid, part, classification, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPLMCADDAsync(ByVal guid As String, ByVal part As String, ByVal classification As String, ByVal userState As Object)
            If (Me.GetPLMCADDOperationCompleted Is Nothing) Then
                Me.GetPLMCADDOperationCompleted = AddressOf Me.OnGetPLMCADDOperationCompleted
            End If
            Me.InvokeAsync("GetPLMCADD", New Object() {guid, part, classification}, Me.GetPLMCADDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPLMCADDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPLMCADDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPLMCADDCompleted(Me, New GetPLMCADDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPLMClassificationECN", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPLMClassificationECN(ByVal guid As String, ByVal part As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetPLMClassificationECN", New Object() {guid, part})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPLMClassificationECNAsync(ByVal guid As String, ByVal part As String)
            Me.GetPLMClassificationECNAsync(guid, part, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPLMClassificationECNAsync(ByVal guid As String, ByVal part As String, ByVal userState As Object)
            If (Me.GetPLMClassificationECNOperationCompleted Is Nothing) Then
                Me.GetPLMClassificationECNOperationCompleted = AddressOf Me.OnGetPLMClassificationECNOperationCompleted
            End If
            Me.InvokeAsync("GetPLMClassificationECN", New Object() {guid, part}, Me.GetPLMClassificationECNOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPLMClassificationECNOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPLMClassificationECNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPLMClassificationECNCompleted(Me, New GetPLMClassificationECNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPLMClassificationECN2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPLMClassificationECN2(ByVal guid As String, ByVal part As String, ByVal usefactory As String, ByVal producttype As String, ByVal usearea As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetPLMClassificationECN2", New Object() {guid, part, usefactory, producttype, usearea})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPLMClassificationECN2Async(ByVal guid As String, ByVal part As String, ByVal usefactory As String, ByVal producttype As String, ByVal usearea As String)
            Me.GetPLMClassificationECN2Async(guid, part, usefactory, producttype, usearea, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPLMClassificationECN2Async(ByVal guid As String, ByVal part As String, ByVal usefactory As String, ByVal producttype As String, ByVal usearea As String, ByVal userState As Object)
            If (Me.GetPLMClassificationECN2OperationCompleted Is Nothing) Then
                Me.GetPLMClassificationECN2OperationCompleted = AddressOf Me.OnGetPLMClassificationECN2OperationCompleted
            End If
            Me.InvokeAsync("GetPLMClassificationECN2", New Object() {guid, part, usefactory, producttype, usearea}, Me.GetPLMClassificationECN2OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPLMClassificationECN2OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPLMClassificationECN2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPLMClassificationECN2Completed(Me, New GetPLMClassificationECN2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPLMDocumentUses", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPLMDocumentUses() As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetPLMDocumentUses", New Object(-1) {})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPLMDocumentUsesAsync()
            Me.GetPLMDocumentUsesAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPLMDocumentUsesAsync(ByVal userState As Object)
            If (Me.GetPLMDocumentUsesOperationCompleted Is Nothing) Then
                Me.GetPLMDocumentUsesOperationCompleted = AddressOf Me.OnGetPLMDocumentUsesOperationCompleted
            End If
            Me.InvokeAsync("GetPLMDocumentUses", New Object(-1) {}, Me.GetPLMDocumentUsesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPLMDocumentUsesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPLMDocumentUsesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPLMDocumentUsesCompleted(Me, New GetPLMDocumentUsesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetModifyDesc", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetModifyDesc(ByVal ECN_number As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetModifyDesc", New Object() {ECN_number})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetModifyDescAsync(ByVal ECN_number As String)
            Me.GetModifyDescAsync(ECN_number, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetModifyDescAsync(ByVal ECN_number As String, ByVal userState As Object)
            If (Me.GetModifyDescOperationCompleted Is Nothing) Then
                Me.GetModifyDescOperationCompleted = AddressOf Me.OnGetModifyDescOperationCompleted
            End If
            Me.InvokeAsync("GetModifyDesc", New Object() {ECN_number}, Me.GetModifyDescOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetModifyDescOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetModifyDescCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetModifyDescCompleted(Me, New GetModifyDescCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckRDNExist", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckRDNExist(ByVal RDN_number As String, ByVal RDN_Item As String) As Integer
            Dim results() As Object = Me.Invoke("CheckRDNExist", New Object() {RDN_number, RDN_Item})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckRDNExistAsync(ByVal RDN_number As String, ByVal RDN_Item As String)
            Me.CheckRDNExistAsync(RDN_number, RDN_Item, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckRDNExistAsync(ByVal RDN_number As String, ByVal RDN_Item As String, ByVal userState As Object)
            If (Me.CheckRDNExistOperationCompleted Is Nothing) Then
                Me.CheckRDNExistOperationCompleted = AddressOf Me.OnCheckRDNExistOperationCompleted
            End If
            Me.InvokeAsync("CheckRDNExist", New Object() {RDN_number, RDN_Item}, Me.CheckRDNExistOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckRDNExistOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckRDNExistCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckRDNExistCompleted(Me, New CheckRDNExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRDNData", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRDNData(ByVal encryption As String, ByVal guid As String, ByVal rdn_number As String, ByVal rdn_item As String, ByVal applyid As String, ByVal starttimestart As String, ByVal starttimeend As String, ByVal endtimestart As String, ByVal endtimeend As String, ByVal isend As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetRDNData", New Object() {encryption, guid, rdn_number, rdn_item, applyid, starttimestart, starttimeend, endtimestart, endtimeend, isend})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRDNDataAsync(ByVal encryption As String, ByVal guid As String, ByVal rdn_number As String, ByVal rdn_item As String, ByVal applyid As String, ByVal starttimestart As String, ByVal starttimeend As String, ByVal endtimestart As String, ByVal endtimeend As String, ByVal isend As String)
            Me.GetRDNDataAsync(encryption, guid, rdn_number, rdn_item, applyid, starttimestart, starttimeend, endtimestart, endtimeend, isend, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRDNDataAsync(ByVal encryption As String, ByVal guid As String, ByVal rdn_number As String, ByVal rdn_item As String, ByVal applyid As String, ByVal starttimestart As String, ByVal starttimeend As String, ByVal endtimestart As String, ByVal endtimeend As String, ByVal isend As String, ByVal userState As Object)
            If (Me.GetRDNDataOperationCompleted Is Nothing) Then
                Me.GetRDNDataOperationCompleted = AddressOf Me.OnGetRDNDataOperationCompleted
            End If
            Me.InvokeAsync("GetRDNData", New Object() {encryption, guid, rdn_number, rdn_item, applyid, starttimestart, starttimeend, endtimestart, endtimeend, isend}, Me.GetRDNDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRDNDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRDNDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRDNDataCompleted(Me, New GetRDNDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBOMData", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBOMData(ByVal userid As String, ByVal PartNumber As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetBOMData", New Object() {userid, PartNumber})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBOMDataAsync(ByVal userid As String, ByVal PartNumber As String)
            Me.GetBOMDataAsync(userid, PartNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBOMDataAsync(ByVal userid As String, ByVal PartNumber As String, ByVal userState As Object)
            If (Me.GetBOMDataOperationCompleted Is Nothing) Then
                Me.GetBOMDataOperationCompleted = AddressOf Me.OnGetBOMDataOperationCompleted
            End If
            Me.InvokeAsync("GetBOMData", New Object() {userid, PartNumber}, Me.GetBOMDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBOMDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBOMDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBOMDataCompleted(Me, New GetBOMDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPLMData", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPLMData(ByVal item_number() As String, ByVal encryption As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetPLMData", New Object() {item_number, encryption})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPLMDataAsync(ByVal item_number() As String, ByVal encryption As String)
            Me.GetPLMDataAsync(item_number, encryption, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPLMDataAsync(ByVal item_number() As String, ByVal encryption As String, ByVal userState As Object)
            If (Me.GetPLMDataOperationCompleted Is Nothing) Then
                Me.GetPLMDataOperationCompleted = AddressOf Me.OnGetPLMDataOperationCompleted
            End If
            Me.InvokeAsync("GetPLMData", New Object() {item_number, encryption}, Me.GetPLMDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPLMDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPLMDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPLMDataCompleted(Me, New GetPLMDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPLMDataById", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPLMDataById(ByVal cdid As String, ByVal encryption As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetPLMDataById", New Object() {cdid, encryption})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPLMDataByIdAsync(ByVal cdid As String, ByVal encryption As String)
            Me.GetPLMDataByIdAsync(cdid, encryption, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPLMDataByIdAsync(ByVal cdid As String, ByVal encryption As String, ByVal userState As Object)
            If (Me.GetPLMDataByIdOperationCompleted Is Nothing) Then
                Me.GetPLMDataByIdOperationCompleted = AddressOf Me.OnGetPLMDataByIdOperationCompleted
            End If
            Me.InvokeAsync("GetPLMDataById", New Object() {cdid, encryption}, Me.GetPLMDataByIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPLMDataByIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPLMDataByIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPLMDataByIdCompleted(Me, New GetPLMDataByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPLMData_current", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPLMData_current(ByVal item_number() As String, ByVal encryption As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetPLMData_current", New Object() {item_number, encryption})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPLMData_currentAsync(ByVal item_number() As String, ByVal encryption As String)
            Me.GetPLMData_currentAsync(item_number, encryption, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPLMData_currentAsync(ByVal item_number() As String, ByVal encryption As String, ByVal userState As Object)
            If (Me.GetPLMData_currentOperationCompleted Is Nothing) Then
                Me.GetPLMData_currentOperationCompleted = AddressOf Me.OnGetPLMData_currentOperationCompleted
            End If
            Me.InvokeAsync("GetPLMData_current", New Object() {item_number, encryption}, Me.GetPLMData_currentOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPLMData_currentOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPLMData_currentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPLMData_currentCompleted(Me, New GetPLMData_currentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertUser", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsertUser(ByVal userid As String, ByVal username As String, ByVal email As String, ByVal vault As PlmVault) As String
            Dim results() As Object = Me.Invoke("InsertUser", New Object() {userid, username, email, vault})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsertUserAsync(ByVal userid As String, ByVal username As String, ByVal email As String, ByVal vault As PlmVault)
            Me.InsertUserAsync(userid, username, email, vault, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertUserAsync(ByVal userid As String, ByVal username As String, ByVal email As String, ByVal vault As PlmVault, ByVal userState As Object)
            If (Me.InsertUserOperationCompleted Is Nothing) Then
                Me.InsertUserOperationCompleted = AddressOf Me.OnInsertUserOperationCompleted
            End If
            Me.InvokeAsync("InsertUser", New Object() {userid, username, email, vault}, Me.InsertUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertUserCompleted(Me, New InsertUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34209"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Public Enum PlmVault
        
        '''<remarks/>
        [Default]
        
        '''<remarks/>
        BzVault
        
        '''<remarks/>
        JxVault
        
        '''<remarks/>
        KsVault
        
        '''<remarks/>
        TwVault
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub GetPLMClassificationCompletedEventHandler(ByVal sender As Object, ByVal e As GetPLMClassificationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPLMClassificationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub GetPLMCADDCompletedEventHandler(ByVal sender As Object, ByVal e As GetPLMCADDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPLMCADDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub GetPLMClassificationECNCompletedEventHandler(ByVal sender As Object, ByVal e As GetPLMClassificationECNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPLMClassificationECNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub GetPLMClassificationECN2CompletedEventHandler(ByVal sender As Object, ByVal e As GetPLMClassificationECN2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPLMClassificationECN2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub GetPLMDocumentUsesCompletedEventHandler(ByVal sender As Object, ByVal e As GetPLMDocumentUsesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPLMDocumentUsesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub GetModifyDescCompletedEventHandler(ByVal sender As Object, ByVal e As GetModifyDescCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetModifyDescCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub CheckRDNExistCompletedEventHandler(ByVal sender As Object, ByVal e As CheckRDNExistCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckRDNExistCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub GetRDNDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetRDNDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRDNDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub GetBOMDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetBOMDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBOMDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub GetPLMDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetPLMDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPLMDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub GetPLMDataByIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetPLMDataByIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPLMDataByIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub GetPLMData_currentCompletedEventHandler(ByVal sender As Object, ByVal e As GetPLMData_currentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPLMData_currentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub InsertUserCompletedEventHandler(ByVal sender As Object, ByVal e As InsertUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
