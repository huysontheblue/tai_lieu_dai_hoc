<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="ppid.UserAddedColumn" type="System.Boolean, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="ppid2.UserAddedColumn" type="System.Boolean, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        Af//wAH//8AB///AAf//wAH//8AB///gA/8=
</value>
  </data>
</root>