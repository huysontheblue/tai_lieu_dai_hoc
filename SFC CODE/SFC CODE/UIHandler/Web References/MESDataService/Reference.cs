//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace UIHandler.MESDataService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BasicHttpBinding_IMESDataServices", Namespace="http://tempuri.org/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SqlParam[]))]
    public partial class MESDataServices : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetDataFromSFCOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertDataToSFCOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTiptopBOMInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCheckEquipmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecEquipmentUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEncrytStringOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertCADVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPLMECNOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetECNBomOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecECNBomUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSystemAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSettingOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public MESDataServices() {
            this.Url = "http://localhost:8083/MESDataServices.svc";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetDataFromSFCCompletedEventHandler GetDataFromSFCCompleted;
        
        /// <remarks/>
        public event InsertDataToSFCCompletedEventHandler InsertDataToSFCCompleted;
        
        /// <remarks/>
        public event GetTiptopBOMInfoCompletedEventHandler GetTiptopBOMInfoCompleted;
        
        /// <remarks/>
        public event GetCheckEquipmentCompletedEventHandler GetCheckEquipmentCompleted;
        
        /// <remarks/>
        public event ExecEquipmentUpdateCompletedEventHandler ExecEquipmentUpdateCompleted;
        
        /// <remarks/>
        public event GetEncrytStringCompletedEventHandler GetEncrytStringCompleted;
        
        /// <remarks/>
        public event InsertCADVersionCompletedEventHandler InsertCADVersionCompleted;
        
        /// <remarks/>
        public event GetPLMECNCompletedEventHandler GetPLMECNCompleted;
        
        /// <remarks/>
        public event GetECNBomCompletedEventHandler GetECNBomCompleted;
        
        /// <remarks/>
        public event ExecECNBomUpdateCompletedEventHandler ExecECNBomUpdateCompleted;
        
        /// <remarks/>
        public event GetSystemAddressCompletedEventHandler GetSystemAddressCompleted;
        
        /// <remarks/>
        public event GetSettingCompletedEventHandler GetSettingCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/GetDataFromSFC", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataTable GetDataFromSFC([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string spName, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/DAL")] SqlParam[] parameters) {
            object[] results = this.Invoke("GetDataFromSFC", new object[] {
                        spName,
                        parameters});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataFromSFCAsync(string spName, SqlParam[] parameters) {
            this.GetDataFromSFCAsync(spName, parameters, null);
        }
        
        /// <remarks/>
        public void GetDataFromSFCAsync(string spName, SqlParam[] parameters, object userState) {
            if ((this.GetDataFromSFCOperationCompleted == null)) {
                this.GetDataFromSFCOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataFromSFCOperationCompleted);
            }
            this.InvokeAsync("GetDataFromSFC", new object[] {
                        spName,
                        parameters}, this.GetDataFromSFCOperationCompleted, userState);
        }
        
        private void OnGetDataFromSFCOperationCompleted(object arg) {
            if ((this.GetDataFromSFCCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataFromSFCCompleted(this, new GetDataFromSFCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/InsertDataToSFC", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertDataToSFC([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string spName, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/DAL")] SqlParam[] parameters, out bool InsertDataToSFCResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool InsertDataToSFCResultSpecified) {
            object[] results = this.Invoke("InsertDataToSFC", new object[] {
                        spName,
                        parameters});
            InsertDataToSFCResult = ((bool)(results[0]));
            InsertDataToSFCResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void InsertDataToSFCAsync(string spName, SqlParam[] parameters) {
            this.InsertDataToSFCAsync(spName, parameters, null);
        }
        
        /// <remarks/>
        public void InsertDataToSFCAsync(string spName, SqlParam[] parameters, object userState) {
            if ((this.InsertDataToSFCOperationCompleted == null)) {
                this.InsertDataToSFCOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertDataToSFCOperationCompleted);
            }
            this.InvokeAsync("InsertDataToSFC", new object[] {
                        spName,
                        parameters}, this.InsertDataToSFCOperationCompleted, userState);
        }
        
        private void OnInsertDataToSFCOperationCompleted(object arg) {
            if ((this.InsertDataToSFCCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertDataToSFCCompleted(this, new InsertDataToSFCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/GetTiptopBOMInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataTable GetTiptopBOMInfo([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string FactoryId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ProfitCenter, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string PartNO, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtValue, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtMsg) {
            object[] results = this.Invoke("GetTiptopBOMInfo", new object[] {
                        FactoryId,
                        ProfitCenter,
                        PartNO});
            rtValue = ((string)(results[1]));
            rtMsg = ((string)(results[2]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetTiptopBOMInfoAsync(string FactoryId, string ProfitCenter, string PartNO) {
            this.GetTiptopBOMInfoAsync(FactoryId, ProfitCenter, PartNO, null);
        }
        
        /// <remarks/>
        public void GetTiptopBOMInfoAsync(string FactoryId, string ProfitCenter, string PartNO, object userState) {
            if ((this.GetTiptopBOMInfoOperationCompleted == null)) {
                this.GetTiptopBOMInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTiptopBOMInfoOperationCompleted);
            }
            this.InvokeAsync("GetTiptopBOMInfo", new object[] {
                        FactoryId,
                        ProfitCenter,
                        PartNO}, this.GetTiptopBOMInfoOperationCompleted, userState);
        }
        
        private void OnGetTiptopBOMInfoOperationCompleted(object arg) {
            if ((this.GetTiptopBOMInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTiptopBOMInfoCompleted(this, new GetTiptopBOMInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/GetCheckEquipment", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetCheckEquipment([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string FactoryId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string profitcenter, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string EquipmentNO, out bool GetCheckEquipmentResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool GetCheckEquipmentResultSpecified, out int Quantity, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool QuantitySpecified, out int ValidQuantity, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool ValidQuantitySpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtValue, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtMsg) {
            object[] results = this.Invoke("GetCheckEquipment", new object[] {
                        FactoryId,
                        profitcenter,
                        EquipmentNO});
            GetCheckEquipmentResult = ((bool)(results[0]));
            GetCheckEquipmentResultSpecified = ((bool)(results[1]));
            Quantity = ((int)(results[2]));
            QuantitySpecified = ((bool)(results[3]));
            ValidQuantity = ((int)(results[4]));
            ValidQuantitySpecified = ((bool)(results[5]));
            rtValue = ((string)(results[6]));
            rtMsg = ((string)(results[7]));
        }
        
        /// <remarks/>
        public void GetCheckEquipmentAsync(string FactoryId, string profitcenter, string EquipmentNO) {
            this.GetCheckEquipmentAsync(FactoryId, profitcenter, EquipmentNO, null);
        }
        
        /// <remarks/>
        public void GetCheckEquipmentAsync(string FactoryId, string profitcenter, string EquipmentNO, object userState) {
            if ((this.GetCheckEquipmentOperationCompleted == null)) {
                this.GetCheckEquipmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCheckEquipmentOperationCompleted);
            }
            this.InvokeAsync("GetCheckEquipment", new object[] {
                        FactoryId,
                        profitcenter,
                        EquipmentNO}, this.GetCheckEquipmentOperationCompleted, userState);
        }
        
        private void OnGetCheckEquipmentOperationCompleted(object arg) {
            if ((this.GetCheckEquipmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCheckEquipmentCompleted(this, new GetCheckEquipmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/ExecEquipmentUpdate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ExecEquipmentUpdate([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string FactoryId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string profitcenter, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string EquipmentNO, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ProudctId, out bool ExecEquipmentUpdateResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool ExecEquipmentUpdateResultSpecified, out int Quantity, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool QuantitySpecified, out int ValidQuantity, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool ValidQuantitySpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtValue, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtMsg) {
            object[] results = this.Invoke("ExecEquipmentUpdate", new object[] {
                        FactoryId,
                        profitcenter,
                        EquipmentNO,
                        ProudctId});
            ExecEquipmentUpdateResult = ((bool)(results[0]));
            ExecEquipmentUpdateResultSpecified = ((bool)(results[1]));
            Quantity = ((int)(results[2]));
            QuantitySpecified = ((bool)(results[3]));
            ValidQuantity = ((int)(results[4]));
            ValidQuantitySpecified = ((bool)(results[5]));
            rtValue = ((string)(results[6]));
            rtMsg = ((string)(results[7]));
        }
        
        /// <remarks/>
        public void ExecEquipmentUpdateAsync(string FactoryId, string profitcenter, string EquipmentNO, string ProudctId) {
            this.ExecEquipmentUpdateAsync(FactoryId, profitcenter, EquipmentNO, ProudctId, null);
        }
        
        /// <remarks/>
        public void ExecEquipmentUpdateAsync(string FactoryId, string profitcenter, string EquipmentNO, string ProudctId, object userState) {
            if ((this.ExecEquipmentUpdateOperationCompleted == null)) {
                this.ExecEquipmentUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecEquipmentUpdateOperationCompleted);
            }
            this.InvokeAsync("ExecEquipmentUpdate", new object[] {
                        FactoryId,
                        profitcenter,
                        EquipmentNO,
                        ProudctId}, this.ExecEquipmentUpdateOperationCompleted, userState);
        }
        
        private void OnExecEquipmentUpdateOperationCompleted(object arg) {
            if ((this.ExecEquipmentUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecEquipmentUpdateCompleted(this, new ExecEquipmentUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/GetEncrytString", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetEncrytString([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string strText) {
            object[] results = this.Invoke("GetEncrytString", new object[] {
                        strText});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetEncrytStringAsync(string strText) {
            this.GetEncrytStringAsync(strText, null);
        }
        
        /// <remarks/>
        public void GetEncrytStringAsync(string strText, object userState) {
            if ((this.GetEncrytStringOperationCompleted == null)) {
                this.GetEncrytStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEncrytStringOperationCompleted);
            }
            this.InvokeAsync("GetEncrytString", new object[] {
                        strText}, this.GetEncrytStringOperationCompleted, userState);
        }
        
        private void OnGetEncrytStringOperationCompleted(object arg) {
            if ((this.GetEncrytStringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEncrytStringCompleted(this, new GetEncrytStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/InsertCADVersion", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertCADVersion([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string FactoryId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ProfitCenter, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ComputerName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string FileName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string Description, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string PartNO, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string Version, out bool InsertCADVersionResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool InsertCADVersionResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtValue, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtMsg) {
            object[] results = this.Invoke("InsertCADVersion", new object[] {
                        FactoryId,
                        ProfitCenter,
                        UserId,
                        ComputerName,
                        FileName,
                        Description,
                        PartNO,
                        Version});
            InsertCADVersionResult = ((bool)(results[0]));
            InsertCADVersionResultSpecified = ((bool)(results[1]));
            rtValue = ((string)(results[2]));
            rtMsg = ((string)(results[3]));
        }
        
        /// <remarks/>
        public void InsertCADVersionAsync(string FactoryId, string ProfitCenter, string UserId, string ComputerName, string FileName, string Description, string PartNO, string Version) {
            this.InsertCADVersionAsync(FactoryId, ProfitCenter, UserId, ComputerName, FileName, Description, PartNO, Version, null);
        }
        
        /// <remarks/>
        public void InsertCADVersionAsync(string FactoryId, string ProfitCenter, string UserId, string ComputerName, string FileName, string Description, string PartNO, string Version, object userState) {
            if ((this.InsertCADVersionOperationCompleted == null)) {
                this.InsertCADVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertCADVersionOperationCompleted);
            }
            this.InvokeAsync("InsertCADVersion", new object[] {
                        FactoryId,
                        ProfitCenter,
                        UserId,
                        ComputerName,
                        FileName,
                        Description,
                        PartNO,
                        Version}, this.InsertCADVersionOperationCompleted, userState);
        }
        
        private void OnInsertCADVersionOperationCompleted(object arg) {
            if ((this.InsertCADVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertCADVersionCompleted(this, new InsertCADVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/GetPLMECN", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataTable GetPLMECN([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string FactoryId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string Profitcenter, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ECNID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtValue, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtMsg) {
            object[] results = this.Invoke("GetPLMECN", new object[] {
                        FactoryId,
                        Profitcenter,
                        ECNID});
            rtValue = ((string)(results[1]));
            rtMsg = ((string)(results[2]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetPLMECNAsync(string FactoryId, string Profitcenter, string ECNID) {
            this.GetPLMECNAsync(FactoryId, Profitcenter, ECNID, null);
        }
        
        /// <remarks/>
        public void GetPLMECNAsync(string FactoryId, string Profitcenter, string ECNID, object userState) {
            if ((this.GetPLMECNOperationCompleted == null)) {
                this.GetPLMECNOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPLMECNOperationCompleted);
            }
            this.InvokeAsync("GetPLMECN", new object[] {
                        FactoryId,
                        Profitcenter,
                        ECNID}, this.GetPLMECNOperationCompleted, userState);
        }
        
        private void OnGetPLMECNOperationCompleted(object arg) {
            if ((this.GetPLMECNCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPLMECNCompleted(this, new GetPLMECNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/GetECNBom", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataTable GetECNBom([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string FactoryId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string profitcenter, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string PartNO, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtValue, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtMsg) {
            object[] results = this.Invoke("GetECNBom", new object[] {
                        FactoryId,
                        profitcenter,
                        PartNO});
            rtValue = ((string)(results[1]));
            rtMsg = ((string)(results[2]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetECNBomAsync(string FactoryId, string profitcenter, string PartNO) {
            this.GetECNBomAsync(FactoryId, profitcenter, PartNO, null);
        }
        
        /// <remarks/>
        public void GetECNBomAsync(string FactoryId, string profitcenter, string PartNO, object userState) {
            if ((this.GetECNBomOperationCompleted == null)) {
                this.GetECNBomOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetECNBomOperationCompleted);
            }
            this.InvokeAsync("GetECNBom", new object[] {
                        FactoryId,
                        profitcenter,
                        PartNO}, this.GetECNBomOperationCompleted, userState);
        }
        
        private void OnGetECNBomOperationCompleted(object arg) {
            if ((this.GetECNBomCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetECNBomCompleted(this, new GetECNBomCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/ExecECNBomUpdate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ExecECNBomUpdate([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string FactoryId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string profitcenter, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Data.DataTable dtBom, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ECNID, out bool ExecECNBomUpdateResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool ExecECNBomUpdateResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtValue, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtMsg) {
            object[] results = this.Invoke("ExecECNBomUpdate", new object[] {
                        FactoryId,
                        profitcenter,
                        dtBom,
                        ECNID});
            ExecECNBomUpdateResult = ((bool)(results[0]));
            ExecECNBomUpdateResultSpecified = ((bool)(results[1]));
            rtValue = ((string)(results[2]));
            rtMsg = ((string)(results[3]));
        }
        
        /// <remarks/>
        public void ExecECNBomUpdateAsync(string FactoryId, string profitcenter, System.Data.DataTable dtBom, string ECNID) {
            this.ExecECNBomUpdateAsync(FactoryId, profitcenter, dtBom, ECNID, null);
        }
        
        /// <remarks/>
        public void ExecECNBomUpdateAsync(string FactoryId, string profitcenter, System.Data.DataTable dtBom, string ECNID, object userState) {
            if ((this.ExecECNBomUpdateOperationCompleted == null)) {
                this.ExecECNBomUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecECNBomUpdateOperationCompleted);
            }
            this.InvokeAsync("ExecECNBomUpdate", new object[] {
                        FactoryId,
                        profitcenter,
                        dtBom,
                        ECNID}, this.ExecECNBomUpdateOperationCompleted, userState);
        }
        
        private void OnExecECNBomUpdateOperationCompleted(object arg) {
            if ((this.ExecECNBomUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecECNBomUpdateCompleted(this, new ExecECNBomUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/GetSystemAddress", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetSystemAddress([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string FactoryId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ProfitCenter, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UpdateType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtValue, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtMsg) {
            object[] results = this.Invoke("GetSystemAddress", new object[] {
                        FactoryId,
                        ProfitCenter,
                        UpdateType});
            rtValue = ((string)(results[1]));
            rtMsg = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSystemAddressAsync(string FactoryId, string ProfitCenter, string UpdateType) {
            this.GetSystemAddressAsync(FactoryId, ProfitCenter, UpdateType, null);
        }
        
        /// <remarks/>
        public void GetSystemAddressAsync(string FactoryId, string ProfitCenter, string UpdateType, object userState) {
            if ((this.GetSystemAddressOperationCompleted == null)) {
                this.GetSystemAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSystemAddressOperationCompleted);
            }
            this.InvokeAsync("GetSystemAddress", new object[] {
                        FactoryId,
                        ProfitCenter,
                        UpdateType}, this.GetSystemAddressOperationCompleted, userState);
        }
        
        private void OnGetSystemAddressOperationCompleted(object arg) {
            if ((this.GetSystemAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSystemAddressCompleted(this, new GetSystemAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESDataServices/GetSetting", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetSetting([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string FactoryId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ProfitCenter, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ParameterType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SettingCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtValue, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string rtMsg) {
            object[] results = this.Invoke("GetSetting", new object[] {
                        FactoryId,
                        ProfitCenter,
                        ParameterType,
                        UserName,
                        SettingCode});
            rtValue = ((string)(results[1]));
            rtMsg = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSettingAsync(string FactoryId, string ProfitCenter, string ParameterType, string UserName, string SettingCode) {
            this.GetSettingAsync(FactoryId, ProfitCenter, ParameterType, UserName, SettingCode, null);
        }
        
        /// <remarks/>
        public void GetSettingAsync(string FactoryId, string ProfitCenter, string ParameterType, string UserName, string SettingCode, object userState) {
            if ((this.GetSettingOperationCompleted == null)) {
                this.GetSettingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSettingOperationCompleted);
            }
            this.InvokeAsync("GetSetting", new object[] {
                        FactoryId,
                        ProfitCenter,
                        ParameterType,
                        UserName,
                        SettingCode}, this.GetSettingOperationCompleted, userState);
        }
        
        private void OnGetSettingOperationCompleted(object arg) {
            if ((this.GetSettingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSettingCompleted(this, new GetSettingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/DAL")]
    public partial class SqlParam {
        
        private DbType _dateTypeField;
        
        private string _fieldNameField;
        
        private object _fieldValueField;
        
        /// <remarks/>
        public DbType _dateType {
            get {
                return this._dateTypeField;
            }
            set {
                this._dateTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string _fieldName {
            get {
                return this._fieldNameField;
            }
            set {
                this._fieldNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object _fieldValue {
            get {
                return this._fieldValueField;
            }
            set {
                this._fieldValueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/System.Data")]
    public enum DbType {
        
        /// <remarks/>
        AnsiString,
        
        /// <remarks/>
        Binary,
        
        /// <remarks/>
        Byte,
        
        /// <remarks/>
        Boolean,
        
        /// <remarks/>
        Currency,
        
        /// <remarks/>
        Date,
        
        /// <remarks/>
        DateTime,
        
        /// <remarks/>
        Decimal,
        
        /// <remarks/>
        Double,
        
        /// <remarks/>
        Guid,
        
        /// <remarks/>
        Int16,
        
        /// <remarks/>
        Int32,
        
        /// <remarks/>
        Int64,
        
        /// <remarks/>
        Object,
        
        /// <remarks/>
        SByte,
        
        /// <remarks/>
        Single,
        
        /// <remarks/>
        String,
        
        /// <remarks/>
        Time,
        
        /// <remarks/>
        UInt16,
        
        /// <remarks/>
        UInt32,
        
        /// <remarks/>
        UInt64,
        
        /// <remarks/>
        VarNumeric,
        
        /// <remarks/>
        AnsiStringFixedLength,
        
        /// <remarks/>
        StringFixedLength,
        
        /// <remarks/>
        Xml,
        
        /// <remarks/>
        DateTime2,
        
        /// <remarks/>
        DateTimeOffset,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetDataFromSFCCompletedEventHandler(object sender, GetDataFromSFCCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataFromSFCCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataFromSFCCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InsertDataToSFCCompletedEventHandler(object sender, InsertDataToSFCCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertDataToSFCCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertDataToSFCCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool InsertDataToSFCResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool InsertDataToSFCResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetTiptopBOMInfoCompletedEventHandler(object sender, GetTiptopBOMInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTiptopBOMInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTiptopBOMInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string rtValue {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string rtMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetCheckEquipmentCompletedEventHandler(object sender, GetCheckEquipmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCheckEquipmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCheckEquipmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool GetCheckEquipmentResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool GetCheckEquipmentResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int Quantity {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public bool QuantitySpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public int ValidQuantity {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public bool ValidQuantitySpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string rtValue {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string rtMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ExecEquipmentUpdateCompletedEventHandler(object sender, ExecEquipmentUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecEquipmentUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecEquipmentUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool ExecEquipmentUpdateResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool ExecEquipmentUpdateResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int Quantity {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public bool QuantitySpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public int ValidQuantity {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public bool ValidQuantitySpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string rtValue {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string rtMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetEncrytStringCompletedEventHandler(object sender, GetEncrytStringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEncrytStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEncrytStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InsertCADVersionCompletedEventHandler(object sender, InsertCADVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertCADVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertCADVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool InsertCADVersionResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool InsertCADVersionResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string rtValue {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string rtMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetPLMECNCompletedEventHandler(object sender, GetPLMECNCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPLMECNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPLMECNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string rtValue {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string rtMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetECNBomCompletedEventHandler(object sender, GetECNBomCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetECNBomCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetECNBomCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string rtValue {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string rtMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ExecECNBomUpdateCompletedEventHandler(object sender, ExecECNBomUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecECNBomUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecECNBomUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool ExecECNBomUpdateResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool ExecECNBomUpdateResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string rtValue {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string rtMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetSystemAddressCompletedEventHandler(object sender, GetSystemAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSystemAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSystemAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string rtValue {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string rtMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetSettingCompletedEventHandler(object sender, GetSettingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSettingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSettingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string rtValue {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string rtMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
}

#pragma warning restore 1591